gimp-context-get-transform-direction:
  blurb: "Get the transform direction."
  arguments:
  example_call: "gimp-context-get-transform-direction()"

gimp-floating-sel-remove:
  blurb: "Remove the specified floating selection from its associated drawable."
  arguments:
    - name: "floating-sel"
      type: "GimpLayer"
  example_call: "gimp-floating-sel-remove(floating-sel)"

gimp-image-scale:
  blurb: "Scale the image using the default interpolation method."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
  example_call: "gimp-image-scale(image, new-width, new-height)"

plug-in-blinds:
  blurb: "Simulate an image painted on window blinds"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "angle-displacement"
      type: "gint"
    - name: "num-segments"
      type: "gint"
    - name: "orientation"
      type: "gchararray"
    - name: "bg-transparent"
      type: "gboolean"
  example_call: "plug-in-blinds(run-mode, image, drawables, angle-displacement, num-segments, orientation, bg-transparent)"

file-raw-placeholder-mef-load:
  blurb: "Load files in the MEF raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-mef-load(run-mode, file)"

plug-in-gfig:
  blurb: "Create geometric shapes"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-gfig(run-mode, image, drawables)"

gimp-image-pick-correlate-layer:
  blurb: "Find the layer visible at the specified coordinates."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "x"
      type: "gint"
    - name: "y"
      type: "gint"
  example_call: "gimp-image-pick-correlate-layer(image, x, y)"

gimp-palettes-popup:
  blurb: "Invokes the Gimp palette selection dialog."
  arguments:
    - name: "palette-callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "initial-palette"
      type: "GimpPalette"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-palettes-popup(palette-callback, popup-title, initial-palette, parent-window)"

gimp-gradient-segment-set-right-color:
  blurb: "Sets the right endpoint color of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-gradient-segment-set-right-color(gradient, segment, color)"

script-fu-make-brush-elliptical:
  blurb: "Create an elliptical brush"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gdouble"
  example_call: "script-fu-make-brush-elliptical(run-mode, string, adjustment, adjustment-2, adjustment-3)"

file-raw-placeholder-raf-load:
  blurb: "Load files in the RAF raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-raf-load(run-mode, file)"

python-fu-console:
  blurb: "Interactive GIMP Python interpreter"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "python-fu-console(run-mode)"

gimp-context-list-paint-methods:
  blurb: "Lists the available paint methods."
  arguments:
  example_call: "gimp-context-list-paint-methods()"

gimp-path-stroke-get-point-at-dist:
  blurb: "Get point at a specified distance along the stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "dist"
      type: "gdouble"
    - name: "precision"
      type: "gdouble"
  example_call: "gimp-path-stroke-get-point-at-dist(path, stroke-id, dist, precision)"

gimp-context-set-interpolation:
  blurb: "Set the interpolation type."
  arguments:
    - name: "interpolation"
      type: "GimpInterpolationType"
  example_call: "gimp-context-set-interpolation(interpolation)"

gimp-image-get-item-position:
  blurb: "Returns the position of the item in its level of its item tree."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-get-item-position(image, item)"

gimp-gradient-segment-range-move:
  blurb: "Move the position of an entire segment range by a delta."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
    - name: "delta"
      type: "gdouble"
    - name: "control-compress"
      type: "gboolean"
  example_call: "gimp-gradient-segment-range-move(gradient, start-segment, end-segment, delta, control-compress)"

plug-in-borderaverage:
  blurb: "Set foreground to the average color of the image border"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "thickness"
      type: "gint"
    - name: "bucket-exponent"
      type: "gchararray"
  example_call: "plug-in-borderaverage(run-mode, image, drawables, thickness, bucket-exponent)"

gimp-image-undo-group-end:
  blurb: "Finish a group undo."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-group-end(image)"

gimp-item-get-lock-content:
  blurb: "Get the 'lock content' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-lock-content(item)"

gimp-item-get-name:
  blurb: "Get the name of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-name(item)"

gimp-gradient-get-uniform-samples:
  blurb: "Sample the gradient in uniform parts."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "num-samples"
      type: "gint"
    - name: "reverse"
      type: "gboolean"
  example_call: "gimp-gradient-get-uniform-samples(gradient, num-samples, reverse)"

gimp-image-flatten:
  blurb: "Flatten all visible layers into a single layer. Discard all invisible layers."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-flatten(image)"

gimp-selection-translate:
  blurb: "Translate the selection by the specified offsets."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-selection-translate(image, offx, offy)"

plug-in-qbist:
  blurb: "Generate a huge variety of abstract patterns"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "anti-aliasing"
      type: "gboolean"
  example_call: "plug-in-qbist(run-mode, image, drawables, anti-aliasing)"

gimp-brush-get-spacing:
  blurb: "Gets the brush spacing, the stamping frequency."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-spacing(brush)"

gimp-gradient-segment-range-flip:
  blurb: "Flip the segment range"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-flip(gradient, start-segment, end-segment)"

gimp-context-get-gradient-blend-color-space:
  blurb: "Get the gradient blend color space."
  arguments:
  example_call: "gimp-context-get-gradient-blend-color-space()"

gimp-item-id-is-valid:
  blurb: "Returns %TRUE if the item ID is valid."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-valid(item-id)"

plug-in-cml-explorer:
  blurb: "Create abstract Coupled-Map Lattice patterns"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "parameter-file"
      type: "GFile"
  example_call: "plug-in-cml-explorer(run-mode, image, drawables, parameter-file)"

gimp-text-layer-set-antialias:
  blurb: "Enable/disable anti-aliasing in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "antialias"
      type: "gboolean"
  example_call: "gimp-text-layer-set-antialias(layer, antialias)"

file-dds-load:
  blurb: "Loads files in DDS image format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "load-mipmaps"
      type: "gboolean"
    - name: "flip-image"
      type: "gboolean"
  example_call: "file-dds-load(run-mode, file, load-mipmaps, flip-image)"

gimp-help-using-photography:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-photography(run-mode)"

gimp-image-convert-set-dither-matrix:
  blurb: "Set dither matrix for conversion to indexed"
  arguments:
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "matrix"
      type: "GBytes"
  example_call: "gimp-image-convert-set-dither-matrix(width, height, matrix)"

gimp-image-get-selected-drawables:
  blurb: "Get the image's selected drawables"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-selected-drawables(image)"

gimp-edit-copy-visible:
  blurb: "Copy from the projection."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-edit-copy-visible(image)"

gimp-image-import-paths-from-file:
  blurb: "Import paths from an SVG file."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "merge"
      type: "gboolean"
    - name: "scale"
      type: "gboolean"
  example_call: "gimp-image-import-paths-from-file(image, file, merge, scale)"

file-sgi-load:
  blurb: "Loads files in SGI image file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-sgi-load(run-mode, file)"

gimp-brush-set-spikes:
  blurb: "Sets the number of spikes for a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "spikes-in"
      type: "gint"
  example_call: "gimp-brush-set-spikes(brush, spikes-in)"

file-colorxhtml-export:
  blurb: "Save as colored HTML text"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "source-file"
      type: "gboolean"
    - name: "characters"
      type: "gchararray"
    - name: "font-size"
      type: "gint"
    - name: "separate"
      type: "gboolean"
  example_call: "file-colorxhtml-export(run-mode, image, file, options, source-file, characters, font-size, separate)"

script-fu-fuzzy-border:
  blurb: "Add a jagged, fuzzy border to an image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "color"
      type: "GeglColor"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "toggle-2"
      type: "gboolean"
    - name: "adjustment-3"
      type: "gint"
    - name: "toggle-3"
      type: "gboolean"
    - name: "toggle-4"
      type: "gboolean"
  example_call: "script-fu-fuzzy-border(run-mode, image, drawables, color, adjustment, toggle, adjustment-2, toggle-2, adjustment-3, toggle-3, toggle-4)"

gimp-display-id-is-valid:
  blurb: "Returns TRUE if the display ID is valid."
  arguments:
    - name: "display-id"
      type: "gint"
  example_call: "gimp-display-id-is-valid(display-id)"

gimp-image-reorder-item:
  blurb: "Reorder the specified item within its item tree"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
    - name: "parent"
      type: "GimpItem"
    - name: "position"
      type: "gint"
  example_call: "gimp-image-reorder-item(image, item, parent, position)"

file-raw-placeholder-erf-load:
  blurb: "Load files in the ERF raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-erf-load(run-mode, file)"

gimp-brush-set-spacing:
  blurb: "Sets the brush spacing."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "spacing"
      type: "gint"
  example_call: "gimp-brush-set-spacing(brush, spacing)"

gimp-image-pick-color:
  blurb: "Determine the color at the given coordinates"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
    - name: "sample-merged"
      type: "gboolean"
    - name: "sample-average"
      type: "gboolean"
    - name: "average-radius"
      type: "gdouble"
  example_call: "gimp-image-pick-color(image, drawables, x, y, sample-merged, sample-average, average-radius)"

gimp-file-create-thumbnail:
  blurb: "Creates a thumbnail of @image for the given @file"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-file-create-thumbnail(image, file)"

gimp-layer-get-composite-mode:
  blurb: "Get the composite mode of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-composite-mode(layer)"

gimp-image-set-selected-layers:
  blurb: "Sets the specified image's selected layers."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "layers"
      type: "GimpCoreObjectArray"
  example_call: "gimp-image-set-selected-layers(image, layers)"

gimp-context-set-ink-angle:
  blurb: "Set ink angle in degrees."
  arguments:
    - name: "angle"
      type: "gdouble"
  example_call: "gimp-context-set-ink-angle(angle)"

gimp-context-get-line-width-unit:
  blurb: "Get the line width unit setting."
  arguments:
  example_call: "gimp-context-get-line-width-unit()"

gimp-item-id-is-layer-mask:
  blurb: "Returns whether the item ID is a layer mask."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-layer-mask(item-id)"

gimp-channel-new-from-component:
  blurb: "Create a new channel from a color component"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "component"
      type: "GimpChannelType"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-channel-new-from-component(image, component, name)"

gimp-patterns-close-popup:
  blurb: "Close the pattern selection dialog."
  arguments:
    - name: "pattern-callback"
      type: "gchararray"
  example_call: "gimp-patterns-close-popup(pattern-callback)"

gimp-clone-default:
  blurb: "Clone from the source to the dest drawable using the current brush"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-clone-default(drawable, strokes)"

file-ps-load:
  blurb: "Load PostScript documents"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "prefer-native-dimensions"
      type: "gboolean"
    - name: "check-bbox"
      type: "gboolean"
    - name: "pages"
      type: "gchararray"
    - name: "coloring"
      type: "gchararray"
    - name: "text-alpha-bits"
      type: "gchararray"
    - name: "graphic-alpha-bits"
      type: "gchararray"
  example_call: "file-ps-load(run-mode, file, width, height, keep-ratio, prefer-native-dimensions, check-bbox, pages, coloring, text-alpha-bits, graphic-alpha-bits)"

gimp-text-layer-resize:
  blurb: "Resize the box of a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
  example_call: "gimp-text-layer-resize(layer, width, height)"

gimp-gradient-new:
  blurb: "Creates a new gradient"
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-gradient-new(name)"

gimp-gradient-segment-get-blending-function:
  blurb: "Gets the gradient segment's blending function"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-blending-function(gradient, segment)"

gimp-image-get-channels:
  blurb: "Returns the list of channels contained in the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-channels(image)"

gimp-image-resize-to-layers:
  blurb: "Resize the image to fit all layers."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-resize-to-layers(image)"

gimp-image-select-color:
  blurb: "Create a selection by selecting all pixels (in the specified drawable) with the same (or similar) color to that specified."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "drawable"
      type: "GimpDrawable"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-image-select-color(image, operation, drawable, color)"

gimp-drawable-type:
  blurb: "Returns the drawable's type."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-type(drawable)"

gimp-get-parasite-list:
  blurb: "List all parasites."
  arguments:
  example_call: "gimp-get-parasite-list()"

gimp-context-set-emulate-brush-dynamics:
  blurb: "Set the stroke option's emulate brush dynamics setting."
  arguments:
    - name: "emulate-dynamics"
      type: "gboolean"
  example_call: "gimp-context-set-emulate-brush-dynamics(emulate-dynamics)"

gimp-image-lower-item:
  blurb: "Lower the specified item in its level in its item tree"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-lower-item(image, item)"

gimp-debug-timer-end:
  blurb: "Finishes measuring elapsed time."
  arguments:
  example_call: "gimp-debug-timer-end()"

file-html-table-export:
  blurb: "GIMP Table Magic"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-html-table-export(run-mode, image, file, options)"

file-raw-placeholder-bay-load:
  blurb: "Load files in the BAY raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-bay-load(run-mode, file)"

plug-in-smooth-palette:
  blurb: "Derive a smooth color palette from the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "n-tries"
      type: "gint"
    - name: "show-image"
      type: "gboolean"
  example_call: "plug-in-smooth-palette(run-mode, image, drawables, width, height, n-tries, show-image)"

gimp-context-get-line-join-style:
  blurb: "Get the line join style setting."
  arguments:
  example_call: "gimp-context-get-line-join-style()"

gimp-text-layer-get-justification:
  blurb: "Get the text justification information of the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-justification(layer)"

gimp-gradients-close-popup:
  blurb: "Close the gradient selection dialog."
  arguments:
    - name: "gradient-callback"
      type: "gchararray"
  example_call: "gimp-gradients-close-popup(gradient-callback)"

gimp-edit-named-cut:
  blurb: "Cut into a named buffer."
  arguments:
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-edit-named-cut(drawables, buffer-name)"

file-pgm-export:
  blurb: "Exports files in the PGM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "raw"
      type: "gchararray"
  example_call: "file-pgm-export(run-mode, image, file, options, raw)"

gimp-item-get-visible:
  blurb: "Get the visibility of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-visible(item)"

gimp-image-get-selection:
  blurb: "Returns the specified image's selection."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-selection(image)"

file-gih-export:
  blurb: "Exports images in GIMP Brush Pipe format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "spacing"
      type: "gint"
    - name: "description"
      type: "gchararray"
    - name: "cell-width"
      type: "gint"
    - name: "cell-height"
      type: "gint"
    - name: "num-cells"
      type: "gint"
    - name: "ranks"
      type: "GBytes"
    - name: "selection-modes"
      type: "GStrv"
  example_call: "file-gih-export(run-mode, image, file, options, spacing, description, cell-width, cell-height, num-cells, ranks, selection-modes)"

gimp-image-get-simulation-bpc:
  blurb: "Returns whether the image has Black Point Compensation enabled for its simulation"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-simulation-bpc(image)"

gimp-context-get-foreground:
  blurb: "Get the current GIMP foreground color."
  arguments:
  example_call: "gimp-context-get-foreground()"

gimp-item-transform-rotate-simple:
  blurb: "Rotate the specified item about given coordinates through the specified angle."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "rotate-type"
      type: "GimpRotationType"
    - name: "auto-center"
      type: "gboolean"
    - name: "center-x"
      type: "gdouble"
    - name: "center-y"
      type: "gdouble"
  example_call: "gimp-item-transform-rotate-simple(item, rotate-type, auto-center, center-x, center-y)"

file-ico-export:
  blurb: "Saves files in Windows ICO file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-ico-export(run-mode, image, file, options)"

gimp-image-get-selected-layers:
  blurb: "Returns the specified image's selected layers."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-selected-layers(image)"

gimp-context-set-ink-tilt-sensitivity:
  blurb: "Set ink tilt sensitivity."
  arguments:
    - name: "tilt"
      type: "gdouble"
  example_call: "gimp-context-set-ink-tilt-sensitivity(tilt)"

gimp-fonts-refresh:
  blurb: "Refresh current fonts. This function always succeeds."
  arguments:
  example_call: "gimp-fonts-refresh()"

plug-in-zealouscrop:
  blurb: "Autocrop unused space from edges and middle"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-zealouscrop(run-mode, image, drawables)"

gimp-drawable-filter-id-is-valid:
  blurb: "Returns %TRUE if the drawable filter ID is valid."
  arguments:
    - name: "filter-id"
      type: "gint"
  example_call: "gimp-drawable-filter-id-is-valid(filter-id)"

gimp-item-set-visible:
  blurb: "Set the visibility of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "visible"
      type: "gboolean"
  example_call: "gimp-item-set-visible(item, visible)"

gimp-image-get-exported-file:
  blurb: "Returns the exported file for the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-exported-file(image)"

gimp-context-set-stroke-method:
  blurb: "Set the active stroke method."
  arguments:
    - name: "stroke-method"
      type: "GimpStrokeMethod"
  example_call: "gimp-context-set-stroke-method(stroke-method)"

gimp-item-get-children:
  blurb: "Returns the item's list of children."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-children(item)"

file-fli-export:
  blurb: "Export FLI-movies"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "from-frame"
      type: "gint"
    - name: "to-frame"
      type: "gint"
  example_call: "file-fli-export(run-mode, image, file, options, from-frame, to-frame)"

plug-in-lighting:
  blurb: "Apply various lighting effects to an image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "bump-drawable"
      type: "GimpDrawable"
    - name: "env-drawable"
      type: "GimpDrawable"
    - name: "do-bumpmap"
      type: "gboolean"
    - name: "do-envmap"
      type: "gboolean"
    - name: "bumpmap-type"
      type: "gchararray"
    - name: "bumpmap-max-height"
      type: "gdouble"
    - name: "light-type-1"
      type: "gchararray"
    - name: "light-color-1"
      type: "GeglColor"
    - name: "light-intensity-1"
      type: "gdouble"
    - name: "light-position-x-1"
      type: "gdouble"
    - name: "light-position-y-1"
      type: "gdouble"
    - name: "light-position-z-1"
      type: "gdouble"
    - name: "light-direction-x-1"
      type: "gdouble"
    - name: "light-direction-y-1"
      type: "gdouble"
    - name: "light-direction-z-1"
      type: "gdouble"
    - name: "ambient-intensity"
      type: "gdouble"
    - name: "diffuse-intensity"
      type: "gdouble"
    - name: "diffuse-reflectivity"
      type: "gdouble"
    - name: "specular-reflectivity"
      type: "gdouble"
    - name: "highlight"
      type: "gdouble"
    - name: "metallic"
      type: "gboolean"
    - name: "antialiasing"
      type: "gboolean"
    - name: "new-image"
      type: "gboolean"
    - name: "transparent-background"
      type: "gboolean"
    - name: "distance"
      type: "gdouble"
  example_call: "plug-in-lighting(run-mode, image, drawables, bump-drawable, env-drawable, do-bumpmap, do-envmap, bumpmap-type, bumpmap-max-height, light-type-1, light-color-1, light-intensity-1, light-position-x-1, light-position-y-1, light-position-z-1, light-direction-x-1, light-direction-y-1, light-direction-z-1, ambient-intensity, diffuse-intensity, diffuse-reflectivity, specular-reflectivity, highlight, metallic, antialiasing, new-image, transparent-background, distance)"

gimp-context-set-sample-threshold-int:
  blurb: "Set the sample threshold setting as an integer value."
  arguments:
    - name: "sample-threshold"
      type: "gint"
  example_call: "gimp-context-set-sample-threshold-int(sample-threshold)"

gimp-layer-set-mode:
  blurb: "Set the combination mode of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "mode"
      type: "GimpLayerMode"
  example_call: "gimp-layer-set-mode(layer, mode)"

gimp-image-get-palette:
  blurb: "Returns the image's colormap"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-palette(image)"

gimp-text-layer-get-antialias:
  blurb: "Check if antialiasing is used in the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-antialias(layer)"

gimp-image-select-contiguous-color:
  blurb: "Create a selection by selecting all pixels around specified coordinates with the same (or similar) color to that at the coordinates."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "drawable"
      type: "GimpDrawable"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
  example_call: "gimp-image-select-contiguous-color(image, operation, drawable, x, y)"

gimp-image-set-component-active:
  blurb: "Sets if the specified image's image component is active."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "component"
      type: "GimpChannelType"
    - name: "active"
      type: "gboolean"
  example_call: "gimp-image-set-component-active(image, component, active)"

gimp-drawables-set-popup:
  blurb: "Sets the selected drawable in a drawable selection dialog."
  arguments:
    - name: "callback"
      type: "gchararray"
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawables-set-popup(callback, drawable)"

file-psd-export:
  blurb: "Saves files in the Photoshop (TM) PSD file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "clippingpath"
      type: "gboolean"
    - name: "clippingpathname"
      type: "gchararray"
    - name: "clippingpathflatness"
      type: "gdouble"
    - name: "cmyk"
      type: "gboolean"
    - name: "duotone"
      type: "gboolean"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-iptc"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
    - name: "include-color-profile"
      type: "gboolean"
    - name: "include-thumbnail"
      type: "gboolean"
  example_call: "file-psd-export(run-mode, image, file, options, clippingpath, clippingpathname, clippingpathflatness, cmyk, duotone, include-exif, include-iptc, include-xmp, include-color-profile, include-thumbnail)"

gimp-item-is-group:
  blurb: "Returns whether the item is a group item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-is-group(item)"

plug-in-colormap-remap:
  blurb: "Rearrange the colormap"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "map"
      type: "GBytes"
  example_call: "plug-in-colormap-remap(run-mode, image, drawables, map)"

gimp-item-set-color-tag:
  blurb: "Set the color tag of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "color-tag"
      type: "GimpColorTag"
  example_call: "gimp-item-set-color-tag(item, color-tag)"

gimp-palette-add-entry:
  blurb: "Appends an entry to the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-name"
      type: "gchararray"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-palette-add-entry(palette, entry-name, color)"

file-raw-placeholder-minolta-load:
  blurb: "Load files in the Minolta raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-minolta-load(run-mode, file)"

file-heif-av1-export:
  blurb: "Exports AVIF images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "quality"
      type: "gint"
    - name: "lossless"
      type: "gboolean"
    - name: "save-bit-depth"
      type: "gint"
    - name: "pixel-format"
      type: "gchararray"
    - name: "encoder-speed"
      type: "gchararray"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
  example_call: "file-heif-av1-export(run-mode, image, file, options, quality, lossless, save-bit-depth, pixel-format, encoder-speed, include-exif, include-xmp)"

gimp-message:
  blurb: "Displays a dialog box with a message."
  arguments:
    - name: "message"
      type: "gchararray"
  example_call: "gimp-message(message)"

plug-in-ifscompose:
  blurb: "Create an Iterated Function System (IFS) fractal"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-ifscompose(run-mode, image, drawables)"

file-png-export:
  blurb: "Exports files in PNG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "interlaced"
      type: "gboolean"
    - name: "compression"
      type: "gint"
    - name: "bkgd"
      type: "gboolean"
    - name: "offs"
      type: "gboolean"
    - name: "phys"
      type: "gboolean"
    - name: "time"
      type: "gboolean"
    - name: "save-transparent"
      type: "gboolean"
    - name: "optimize-palette"
      type: "gboolean"
    - name: "format"
      type: "gchararray"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-iptc"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
    - name: "include-color-profile"
      type: "gboolean"
    - name: "include-thumbnail"
      type: "gboolean"
    - name: "include-comment"
      type: "gboolean"
  example_call: "file-png-export(run-mode, image, file, options, interlaced, compression, bkgd, offs, phys, time, save-transparent, optimize-palette, format, include-exif, include-iptc, include-xmp, include-color-profile, include-thumbnail, include-comment)"

gimp-image-select-item:
  blurb: "Transforms the specified item into a selection"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-select-item(image, operation, item)"

gimp-image-set-palette:
  blurb: "Set the image's colormap to a copy of @palette"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "new-palette"
      type: "GimpPalette"
  example_call: "gimp-image-set-palette(image, new-palette)"

gimp-image-get-default-new-layer-mode:
  blurb: "Get the default mode for newly created layers of this image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-default-new-layer-mode(image)"

gimp-file-load-layers:
  blurb: "Loads an image file as layers for an existing image."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-file-load-layers(run-mode, image, file)"

script-fu-difference-clouds:
  blurb: "Solid noise applied with Difference layer mode"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "script-fu-difference-clouds(run-mode, image, drawables)"

gimp-context-set-brush:
  blurb: "Set the active brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-context-set-brush(brush)"

gimp-context-get-ink-angle:
  blurb: "Get ink angle in degrees."
  arguments:
  example_call: "gimp-context-get-ink-angle()"

gimp-context-set-line-miter-limit:
  blurb: "Set the line miter limit setting."
  arguments:
    - name: "miter-limit"
      type: "gdouble"
  example_call: "gimp-context-set-line-miter-limit(miter-limit)"

gimp-image-get-parasite:
  blurb: "Look up a parasite in an image"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-image-get-parasite(image, name)"

gimp-context-get-mypaint-brush:
  blurb: "Get the currently active MyPaint brush."
  arguments:
  example_call: "gimp-context-get-mypaint-brush()"

gimp-path-remove-stroke:
  blurb: "remove the stroke from a path object."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
  example_call: "gimp-path-remove-stroke(path, stroke-id)"

file-raw-placeholder-dng-load:
  blurb: "Load files in the DNG raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-dng-load(run-mode, file)"

gimp-palette-set-columns:
  blurb: "Sets the number of columns used to display the palette"
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "columns"
      type: "gint"
  example_call: "gimp-palette-set-columns(palette, columns)"

file-psd-load:
  blurb: "Loads images from the Photoshop PSD and PSB file formats"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-psd-load(run-mode, file)"

gimp-image-get-floating-sel:
  blurb: "Return the floating selection of the image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-floating-sel(image)"

plug-in-script-fu-text-console:
  blurb: "Provides a text console mode for script-fu development"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "plug-in-script-fu-text-console(run-mode)"

gimp-context-set-sample-criterion:
  blurb: "Set the sample criterion setting."
  arguments:
    - name: "sample-criterion"
      type: "GimpSelectCriterion"
  example_call: "gimp-context-set-sample-criterion(sample-criterion)"

gimp-image-new-with-precision:
  blurb: "Creates a new image with the specified width, height, type and precision."
  arguments:
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "type"
      type: "GimpImageBaseType"
    - name: "precision"
      type: "GimpPrecision"
  example_call: "gimp-image-new-with-precision(width, height, type, precision)"

gimp-drawable-brightness-contrast:
  blurb: "Modify brightness/contrast in the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "brightness"
      type: "gdouble"
    - name: "contrast"
      type: "gdouble"
  example_call: "gimp-drawable-brightness-contrast(drawable, brightness, contrast)"

gimp-gradient-segment-get-left-color:
  blurb: "Gets the left endpoint color of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-left-color(gradient, segment)"

file-pat-load:
  blurb: "Loads GIMP patterns"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-pat-load(run-mode, file)"

gimp-drawable-filter-get-visible:
  blurb: "Get the visibility of the specified filter."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-get-visible(filter)"

gimp-patterns-set-popup:
  blurb: "Sets the current pattern in a pattern selection dialog."
  arguments:
    - name: "pattern-callback"
      type: "gchararray"
    - name: "pattern"
      type: "GimpPattern"
  example_call: "gimp-patterns-set-popup(pattern-callback, pattern)"

gimp-selection-invert:
  blurb: "Invert the selection mask."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-invert(image)"

file-png-load:
  blurb: "Loads files in PNG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-png-load(run-mode, file)"

file-pdf-load:
  blurb: "Load file in PDF format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "prefer-native-dimensions"
      type: "gboolean"
    - name: "password"
      type: "gchararray"
    - name: "reverse-order"
      type: "gboolean"
    - name: "pages"
      type: "GimpInt32Array"
    - name: "antialias"
      type: "gboolean"
    - name: "white-background"
      type: "gboolean"
  example_call: "file-pdf-load(run-mode, file, width, height, keep-ratio, prefer-native-dimensions, password, reverse-order, pages, antialias, white-background)"

file-ani-export:
  blurb: "Saves files in Windows ANI file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "cursor-name"
      type: "gchararray"
    - name: "author-name"
      type: "gchararray"
    - name: "default-delay"
      type: "gint"
    - name: "hot-spot-x"
      type: "GimpInt32Array"
    - name: "hot-spot-y"
      type: "GimpInt32Array"
  example_call: "file-ani-export(run-mode, image, file, options, cursor-name, author-name, default-delay, hot-spot-x, hot-spot-y)"

file-csource-export:
  blurb: "Dump image data in RGB(A) format for C source"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-csource-export(run-mode, image, file, options)"

gimp-gradient-get-by-name:
  blurb: "Returns the gradient with the given name."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-gradient-get-by-name(name)"

file-jpegxl-export:
  blurb: "Saves files in the JPEG XL file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "lossless"
      type: "gboolean"
    - name: "compression"
      type: "gdouble"
    - name: "save-bit-depth"
      type: "gint"
    - name: "speed"
      type: "gchararray"
    - name: "cmyk"
      type: "gboolean"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
  example_call: "file-jpegxl-export(run-mode, image, file, options, lossless, compression, save-bit-depth, speed, cmyk, include-exif, include-xmp)"

gimp-progress-cancel:
  blurb: "Cancels a running progress."
  arguments:
    - name: "progress-callback"
      type: "gchararray"
  example_call: "gimp-progress-cancel(progress-callback)"

gimp-image-get-selected-paths:
  blurb: "Returns the specified image's selected paths."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-selected-paths(image)"

gimp-layer-copy:
  blurb: "Copy a layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-copy(layer)"

gimp-drawable-edit-gradient-fill:
  blurb: "Draw a gradient between the starting and ending coordinates with the specified gradient type."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "gradient-type"
      type: "GimpGradientType"
    - name: "offset"
      type: "gdouble"
    - name: "supersample"
      type: "gboolean"
    - name: "supersample-max-depth"
      type: "gint"
    - name: "supersample-threshold"
      type: "gdouble"
    - name: "dither"
      type: "gboolean"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
    - name: "x2"
      type: "gdouble"
    - name: "y2"
      type: "gdouble"
  example_call: "gimp-drawable-edit-gradient-fill(drawable, gradient-type, offset, supersample, supersample-max-depth, supersample-threshold, dither, x1, y1, x2, y2)"

gimp-layer-set-composite-space:
  blurb: "Set the composite space of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "composite-space"
      type: "GimpLayerColorSpace"
  example_call: "gimp-layer-set-composite-space(layer, composite-space)"

plugin-export-pdb-list:
  blurb: "Exports all currently known procedure names to a text file."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plugin-export-pdb-list(run-mode, image, drawables)"

gimp-selection-feather:
  blurb: "Feather the image's selection"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "radius"
      type: "gdouble"
  example_call: "gimp-selection-feather(image, radius)"

gimp-item-transform-shear:
  blurb: "Shear the specified item about its center by the specified magnitude."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "shear-type"
      type: "GimpOrientationType"
    - name: "magnitude"
      type: "gdouble"
  example_call: "gimp-item-transform-shear(item, shear-type, magnitude)"

gimp-image-get-selected-channels:
  blurb: "Returns the specified image's selected channels."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-selected-channels(image)"

gimp-drawable-filter-set-visible:
  blurb: "Set the visibility of the specified filter."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
    - name: "visible"
      type: "gboolean"
  example_call: "gimp-drawable-filter-set-visible(filter, visible)"

gimp-resource-delete:
  blurb: "Deletes a resource."
  arguments:
    - name: "resource"
      type: "GimpResource"
  example_call: "gimp-resource-delete(resource)"

gimp-path-new-from-text-layer:
  blurb: "Creates a new path object from a text layer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-path-new-from-text-layer(image, layer)"

gimp-drawable-fill:
  blurb: "Fill the drawable with the specified fill mode."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "fill-type"
      type: "GimpFillType"
  example_call: "gimp-drawable-fill(drawable, fill-type)"

plug-in-gflare:
  blurb: "Produce a lense flare effect using gradients"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "gflare-name"
      type: "gchararray"
    - name: "center-x"
      type: "gint"
    - name: "center-y"
      type: "gint"
    - name: "radius"
      type: "gdouble"
    - name: "rotation"
      type: "gdouble"
    - name: "hue"
      type: "gdouble"
    - name: "vector-angle"
      type: "gdouble"
    - name: "vector-length"
      type: "gdouble"
    - name: "use-asupsample"
      type: "gboolean"
    - name: "asupsample-max-depth"
      type: "gint"
    - name: "asupsample-threshold"
      type: "gdouble"
  example_call: "plug-in-gflare(run-mode, image, drawables, gflare-name, center-x, center-y, radius, rotation, hue, vector-angle, vector-length, use-asupsample, asupsample-max-depth, asupsample-threshold)"

gimp-drawable-edit-stroke-item:
  blurb: "Stroke the specified item"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-drawable-edit-stroke-item(drawable, item)"

file-webp-export:
  blurb: "Saves files in the WebP image format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "preset"
      type: "gchararray"
    - name: "lossless"
      type: "gboolean"
    - name: "quality"
      type: "gdouble"
    - name: "alpha-quality"
      type: "gdouble"
    - name: "use-sharp-yuv"
      type: "gboolean"
    - name: "animation-loop"
      type: "gboolean"
    - name: "minimize-size"
      type: "gboolean"
    - name: "keyframe-distance"
      type: "gint"
    - name: "default-delay"
      type: "gint"
    - name: "force-delay"
      type: "gboolean"
    - name: "animation"
      type: "gboolean"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-iptc"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
    - name: "include-color-profile"
      type: "gboolean"
    - name: "include-thumbnail"
      type: "gboolean"
  example_call: "file-webp-export(run-mode, image, file, options, preset, lossless, quality, alpha-quality, use-sharp-yuv, animation-loop, minimize-size, keyframe-distance, default-delay, force-delay, animation, include-exif, include-iptc, include-xmp, include-color-profile, include-thumbnail)"

gimp-item-set-expanded:
  blurb: "Sets the expanded state of the item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "expanded"
      type: "gboolean"
  example_call: "gimp-item-set-expanded(item, expanded)"

gimp-drawable-colorize-hsl:
  blurb: "Render the drawable as a grayscale image seen through a colored glass."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "hue"
      type: "gdouble"
    - name: "saturation"
      type: "gdouble"
    - name: "lightness"
      type: "gdouble"
  example_call: "gimp-drawable-colorize-hsl(drawable, hue, saturation, lightness)"

gimp-palette-export-text:
  blurb: "Write all the colors in a palette to a text file, one hexadecimal value per line (no names)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "dirname"
      type: "GFile"
    - name: "string"
      type: "gchararray"
  example_call: "gimp-palette-export-text(run-mode, dirname, string)"

file-gbr-export-internal:
  blurb: "Exports Gimp brush file (.GBR)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "file"
      type: "GFile"
    - name: "spacing"
      type: "gint"
    - name: "name"
      type: "gchararray"
  example_call: "file-gbr-export-internal(run-mode, image, drawables, file, spacing, name)"

file-pdf-load-thumb:
  blurb: "Loads a preview from a PDF file."
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-pdf-load-thumb(file, thumb-size)"

file-psd-load-metadata:
  blurb: "Loads Photoshop-format metadata from other file formats."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "size"
      type: "gint"
    - name: "image"
      type: "GimpImage"
    - name: "metadata-type"
      type: "gboolean"
    - name: "cmyk"
      type: "gboolean"
  example_call: "file-psd-load-metadata(run-mode, file, size, image, metadata-type, cmyk)"

file-raw-placeholder-qtk-load:
  blurb: "Load files in the QTK raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-qtk-load(run-mode, file)"

gimp-floating-sel-anchor:
  blurb: "Anchor the specified floating selection to its associated drawable."
  arguments:
    - name: "floating-sel"
      type: "GimpLayer"
  example_call: "gimp-floating-sel-anchor(floating-sel)"

gimp-layer-get-opacity:
  blurb: "Get the opacity of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-opacity(layer)"

plug-in-goat-exercise-python:
  blurb: "Plug-in example in Python 3"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-goat-exercise-python(run-mode, image, drawables)"

gimp-channel-get-opacity:
  blurb: "Get the opacity of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
  example_call: "gimp-channel-get-opacity(channel)"

gimp-image-id-is-valid:
  blurb: "Returns TRUE if the image ID is valid."
  arguments:
    - name: "image-id"
      type: "gint"
  example_call: "gimp-image-id-is-valid(image-id)"

file-ani-load:
  blurb: "Loads files of Windows ANI file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-ani-load(run-mode, file)"

gimp-channel-get-color:
  blurb: "Get the compositing color of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
  example_call: "gimp-channel-get-color(channel)"

file-sunras-export:
  blurb: "Export file in the SunRaster file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "rle"
      type: "gchararray"
  example_call: "file-sunras-export(run-mode, image, file, options, rle)"

gimp-airbrush-default:
  blurb: "Paint in the current brush with varying pressure. Paint application is time-dependent."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-airbrush-default(drawable, strokes)"

gimp-context-set-defaults:
  blurb: "Reset context settings to their default values."
  arguments:
  example_call: "gimp-context-set-defaults()"

file-pnm-load:
  blurb: "Loads files in the PNM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-pnm-load(run-mode, file)"

gimp-context-set-sample-transparent:
  blurb: "Set the sample transparent setting."
  arguments:
    - name: "sample-transparent"
      type: "gboolean"
  example_call: "gimp-context-set-sample-transparent(sample-transparent)"

plug-in-unit-editor:
  blurb: "Create or alter units used in GIMP"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "plug-in-unit-editor(run-mode)"

gimp-context-set-ink-speed-sensitivity:
  blurb: "Set ink speed sensitivity."
  arguments:
    - name: "speed"
      type: "gdouble"
  example_call: "gimp-context-set-ink-speed-sensitivity(speed)"

file-pdf-export:
  blurb: "Save files in PDF format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "vectorize"
      type: "gboolean"
    - name: "ignore-hidden"
      type: "gboolean"
    - name: "apply-masks"
      type: "gboolean"
    - name: "layers-as-pages"
      type: "gboolean"
    - name: "reverse-order"
      type: "gboolean"
    - name: "root-layers-only"
      type: "gboolean"
    - name: "convert-text-layers"
      type: "gboolean"
    - name: "fill-background-color"
      type: "gboolean"
  example_call: "file-pdf-export(run-mode, image, file, options, vectorize, ignore-hidden, apply-masks, layers-as-pages, reverse-order, root-layers-only, convert-text-layers, fill-background-color)"

plug-in-pagecurl:
  blurb: "Curl up one of the image corners"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "colors"
      type: "gchararray"
    - name: "edge"
      type: "gchararray"
    - name: "orientation"
      type: "gchararray"
    - name: "shade"
      type: "gboolean"
    - name: "opacity"
      type: "gdouble"
  example_call: "plug-in-pagecurl(run-mode, image, drawables, colors, edge, orientation, shade, opacity)"

gimp-displays-flush:
  blurb: "Flush all internal changes to the user interface"
  arguments:
  example_call: "gimp-displays-flush()"

gimp-item-transform-scale:
  blurb: "Scale the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
  example_call: "gimp-item-transform-scale(item, x0, y0, x1, y1)"

gimp-item-get-color-tag:
  blurb: "Get the color tag of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-color-tag(item)"

gimp-context-set-gradient-fg-bg-rgb:
  blurb: "Sets the built-in FG-BG RGB gradient as the active gradient."
  arguments:
  example_call: "gimp-context-set-gradient-fg-bg-rgb()"

gimp-get-default-unit:
  blurb: "Get the default unit (taken from the user's locale)."
  arguments:
  example_call: "gimp-get-default-unit()"

gimp-item-get-image:
  blurb: "Returns the item's image."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-image(item)"

gimp-selection-flood:
  blurb: "Remove holes from the image's selection"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-flood(image)"

gimp-layer-set-opacity:
  blurb: "Set the opacity of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "opacity"
      type: "gdouble"
  example_call: "gimp-layer-set-opacity(layer, opacity)"

gimp-channel-set-opacity:
  blurb: "Set the opacity of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
    - name: "opacity"
      type: "gdouble"
  example_call: "gimp-channel-set-opacity(channel, opacity)"

file-raw-placeholder-hasselblad-load:
  blurb: "Load files in the Hasselblad raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-hasselblad-load(run-mode, file)"

gimp-context-get-font:
  blurb: "Get the currently active font."
  arguments:
  example_call: "gimp-context-get-font()"

script-fu-guide-new-percent:
  blurb: "Add a guide at the position specified as a percentage of the image size"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "option"
      type: "gint"
    - name: "adjustment"
      type: "gdouble"
  example_call: "script-fu-guide-new-percent(run-mode, image, drawables, option, adjustment)"

gimp-drawable-merge-shadow:
  blurb: "Merge the shadow buffer with the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "undo"
      type: "gboolean"
  example_call: "gimp-drawable-merge-shadow(drawable, undo)"

file-ani-load-thumb:
  blurb: "Loads a preview from a Windows ANI files"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-ani-load-thumb(file, thumb-size)"

gimp-image-new:
  blurb: "Creates a new image with the specified width, height, and type."
  arguments:
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "type"
      type: "GimpImageBaseType"
  example_call: "gimp-image-new(width, height, type)"

gimp-image-get-channel-by-name:
  blurb: "Find a channel with a given name in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-image-get-channel-by-name(image, name)"

gimp-edit-paste-as-new-image:
  blurb: "Paste buffer to a new image."
  arguments:
  example_call: "gimp-edit-paste-as-new-image()"

gimp-item-set-name:
  blurb: "Set the name of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-item-set-name(item, name)"

script-fu-circuit:
  blurb: "Fill the selected region (or alpha) with traces like those on a circuit board"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
    - name: "toggle-3"
      type: "gboolean"
  example_call: "script-fu-circuit(run-mode, image, drawables, adjustment, adjustment-2, toggle, toggle-2, toggle-3)"

gimp-text-layer-set-justification:
  blurb: "Set the justification of the text in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "justify"
      type: "GimpTextJustification"
  example_call: "gimp-text-layer-set-justification(layer, justify)"

gimp-context-set-ink-size:
  blurb: "Set ink blob size in pixels."
  arguments:
    - name: "size"
      type: "gdouble"
  example_call: "gimp-context-set-ink-size(size)"

gimp-layer-get-composite-space:
  blurb: "Get the composite space of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-composite-space(layer)"

file-raw-placeholder-ari-load:
  blurb: "Load files in the ARI raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-ari-load(run-mode, file)"

file-gbr-export:
  blurb: "Exports files in the GIMP brush file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "spacing"
      type: "gint"
    - name: "description"
      type: "gchararray"
  example_call: "file-gbr-export(run-mode, image, file, options, spacing, description)"

gimp-image-grid-get-offset:
  blurb: "Gets the offset of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-grid-get-offset(image)"

file-dicom-load:
  blurb: "Loads files of the dicom file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-dicom-load(run-mode, file)"

gimp-image-undo-thaw:
  blurb: "Thaw the image's undo stack."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-thaw(image)"

gimp-context-set-gradient-reverse:
  blurb: "Set the gradient reverse setting."
  arguments:
    - name: "reverse"
      type: "gboolean"
  example_call: "gimp-context-set-gradient-reverse(reverse)"

plug-in-drawable-compose:
  blurb: "Compose an image from multiple drawables of gray images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "drawable-2"
      type: "GimpDrawable"
    - name: "drawable-3"
      type: "GimpDrawable"
    - name: "drawable-4"
      type: "GimpDrawable"
    - name: "compose-type"
      type: "gchararray"
  example_call: "plug-in-drawable-compose(run-mode, image, drawables, drawable-2, drawable-3, drawable-4, compose-type)"

file-gbr-load:
  blurb: "Loads GIMP brushes"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-gbr-load(run-mode, file)"

gimp-edit-cut:
  blurb: "Cut from the specified drawables."
  arguments:
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "gimp-edit-cut(drawables)"

file-pam-export:
  blurb: "Exports files in the PAM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-pam-export(run-mode, image, file, options)"

plug-in-gimpressionist:
  blurb: "Performs various artistic operations"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "preset"
      type: "gchararray"
  example_call: "plug-in-gimpressionist(run-mode, image, drawables, preset)"

gimp-layer-resize-to-image-size:
  blurb: "Resize a layer to the image size."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-resize-to-image-size(layer)"

gimp-help:
  blurb: "Load a help page."
  arguments:
    - name: "help-domain"
      type: "gchararray"
    - name: "help-id"
      type: "gchararray"
  example_call: "gimp-help(help-domain, help-id)"

plug-in-curve-bend:
  blurb: "Bend the image using two control curves"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "rotation"
      type: "gdouble"
    - name: "smoothing"
      type: "gboolean"
    - name: "antialias"
      type: "gboolean"
    - name: "work-on-copy"
      type: "gboolean"
    - name: "curve-type"
      type: "gchararray"
    - name: "curve-border"
      type: "gchararray"
    - name: "upper-point-x"
      type: "GimpDoubleArray"
    - name: "upper-point-y"
      type: "GimpDoubleArray"
    - name: "lower-point-x"
      type: "GimpDoubleArray"
    - name: "lower-point-y"
      type: "GimpDoubleArray"
    - name: "upper-val-y"
      type: "GBytes"
    - name: "lower-val-y"
      type: "GBytes"
  example_call: "plug-in-curve-bend(run-mode, image, drawables, rotation, smoothing, antialias, work-on-copy, curve-type, curve-border, upper-point-x, upper-point-y, lower-point-x, lower-point-y, upper-val-y, lower-val-y)"

file-webp-load:
  blurb: "Loads images in the WebP file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-webp-load(run-mode, file)"

gimp-image-lower-item-to-bottom:
  blurb: "Lower the specified item to the bottom of its level in its item tree"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-lower-item-to-bottom(image, item)"

gimp-item-transform-flip-simple:
  blurb: "Flip the specified item either vertically or horizontally."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "flip-type"
      type: "GimpOrientationType"
    - name: "auto-center"
      type: "gboolean"
    - name: "axis"
      type: "gdouble"
  example_call: "gimp-item-transform-flip-simple(item, flip-type, auto-center, axis)"

file-aa-export:
  blurb: "Saves grayscale image in various text formats"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "file-type"
      type: "gint"
  example_call: "file-aa-export(run-mode, image, file, options, file-type)"

python-fu-palette-to-gradient:
  blurb: "Create a gradient using colors from the palette"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "palette"
      type: "GimpPalette"
  example_call: "python-fu-palette-to-gradient(run-mode, palette)"

gimp-context-get-ink-size:
  blurb: "Get ink blob size in pixels."
  arguments:
  example_call: "gimp-context-get-ink-size()"

gimp-image-flip:
  blurb: "Flips the image horizontally or vertically."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "flip-type"
      type: "GimpOrientationType"
  example_call: "gimp-image-flip(image, flip-type)"

script-fu-reverse-layers:
  blurb: "Reverse the order of layers in the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "script-fu-reverse-layers(run-mode, image, drawables)"

gimp-drawable-equalize:
  blurb: "Equalize the contents of the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "mask-only"
      type: "gboolean"
  example_call: "gimp-drawable-equalize(drawable, mask-only)"

gimp-image-remove-path:
  blurb: "Remove the specified path from the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "path"
      type: "GimpPath"
  example_call: "gimp-image-remove-path(image, path)"

gimp-image-get-xcf-file:
  blurb: "Returns the XCF file for the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-xcf-file(image)"

gimp-image-floating-sel-attached-to:
  blurb: "Return the drawable the floating selection is attached to."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-floating-sel-attached-to(image)"

gimp-palettes-close-popup:
  blurb: "Close the palette selection dialog."
  arguments:
    - name: "palette-callback"
      type: "gchararray"
  example_call: "gimp-palettes-close-popup(palette-callback)"

gimp-context-set-gradient-fg-bg-hsv-ccw:
  blurb: "Sets the built-in FG-BG HSV (ccw) gradient as the active gradient."
  arguments:
  example_call: "gimp-context-set-gradient-fg-bg-hsv-ccw()"

plug-in-lic:
  blurb: "Special effects that nobody understands"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "effect-channel"
      type: "gchararray"
    - name: "effect-operator"
      type: "gchararray"
    - name: "effect-convolve"
      type: "gchararray"
    - name: "effect-image"
      type: "GimpDrawable"
    - name: "filter-length"
      type: "gdouble"
    - name: "noise-magnitude"
      type: "gdouble"
    - name: "integration-steps"
      type: "gdouble"
    - name: "min-value"
      type: "gdouble"
    - name: "max-value"
      type: "gdouble"
  example_call: "plug-in-lic(run-mode, image, drawables, effect-channel, effect-operator, effect-convolve, effect-image, filter-length, noise-magnitude, integration-steps, min-value, max-value)"

script-fu-add-bevel:
  blurb: "Add a beveled border to an image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
  example_call: "script-fu-add-bevel(run-mode, image, drawables, adjustment, toggle, toggle-2)"

gimp-drawable-get-height:
  blurb: "Returns the height of the drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-get-height(drawable)"

gimp-context-set-transform-direction:
  blurb: "Set the transform direction."
  arguments:
    - name: "transform-direction"
      type: "GimpTransformDirection"
  example_call: "gimp-context-set-transform-direction(transform-direction)"

script-fu-weave:
  blurb: "Create a new layer filled with a weave effect to be used as an overlay or bump map"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "adjustment-3"
      type: "gdouble"
    - name: "adjustment-4"
      type: "gdouble"
    - name: "adjustment-5"
      type: "gdouble"
    - name: "adjustment-6"
      type: "gdouble"
    - name: "adjustment-7"
      type: "gdouble"
  example_call: "script-fu-weave(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, adjustment-4, adjustment-5, adjustment-6, adjustment-7)"

gimp-palette-get-by-name:
  blurb: "Returns the palette with the given name."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-palette-get-by-name(name)"

gimp-context-get-sample-threshold:
  blurb: "Get the sample threshold setting."
  arguments:
  example_call: "gimp-context-get-sample-threshold()"

gimp-image-is-dirty:
  blurb: "Checks if the image has unsaved changes."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-is-dirty(image)"

gimp-heal:
  blurb: "Heal from the source to the dest drawable using the current brush"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "src-drawable"
      type: "GimpDrawable"
    - name: "src-x"
      type: "gdouble"
    - name: "src-y"
      type: "gdouble"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-heal(drawable, src-drawable, src-x, src-y, strokes)"

gimp-selection-border:
  blurb: "Border the image's selection"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "radius"
      type: "gint"
  example_call: "gimp-selection-border(image, radius)"

plug-in-warp:
  blurb: "Twist or smear image in many different ways"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "amount"
      type: "gdouble"
    - name: "warp-map"
      type: "GimpDrawable"
    - name: "iter"
      type: "gint"
    - name: "dither"
      type: "gdouble"
    - name: "angle"
      type: "gdouble"
    - name: "wrap-type"
      type: "gchararray"
    - name: "mag-map"
      type: "GimpDrawable"
    - name: "mag-use"
      type: "gboolean"
    - name: "substeps"
      type: "gint"
    - name: "grad-map"
      type: "GimpDrawable"
    - name: "grad-scale"
      type: "gdouble"
    - name: "vector-map"
      type: "GimpDrawable"
    - name: "vector-scale"
      type: "gdouble"
    - name: "vector-angle"
      type: "gdouble"
  example_call: "plug-in-warp(run-mode, image, drawables, amount, warp-map, iter, dither, angle, wrap-type, mag-map, mag-use, substeps, grad-map, grad-scale, vector-map, vector-scale, vector-angle)"

gimp-resource-rename:
  blurb: "Renames a resource. When the name is in use, renames to a unique name."
  arguments:
    - name: "resource"
      type: "GimpResource"
    - name: "new-name"
      type: "gchararray"
  example_call: "gimp-resource-rename(resource, new-name)"

gimp-image-undo-enable:
  blurb: "Enable the image's undo stack."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-enable(image)"

gimp-context-get-sample-merged:
  blurb: "Get the sample merged setting."
  arguments:
  example_call: "gimp-context-get-sample-merged()"

file-dcx-load:
  blurb: "Loads files in Zsoft DCX file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "override-palette"
      type: "gchararray"
  example_call: "file-dcx-load(run-mode, file, override-palette)"

gimp-buffer-get-image-type:
  blurb: "Retrieves the specified buffer's image type."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-buffer-get-image-type(buffer-name)"

gimp-item-delete:
  blurb: "Delete a item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-delete(item)"

gimp-image-get-path-by-tattoo:
  blurb: "Find a path with a given tattoo in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "tattoo"
      type: "guint"
  example_call: "gimp-image-get-path-by-tattoo(image, tattoo)"

script-fu-paste-as-pattern:
  blurb: "Paste the clipboard contents into a new pattern"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "string-2"
      type: "gchararray"
  example_call: "script-fu-paste-as-pattern(run-mode, string, string-2)"

gimp-context-get-ink-blob-type:
  blurb: "Get ink blob type."
  arguments:
  example_call: "gimp-context-get-ink-blob-type()"

file-jpeg-export:
  blurb: "Exports files in the JPEG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "quality"
      type: "gdouble"
    - name: "smoothing"
      type: "gdouble"
    - name: "optimize"
      type: "gboolean"
    - name: "progressive"
      type: "gboolean"
    - name: "cmyk"
      type: "gboolean"
    - name: "sub-sampling"
      type: "gchararray"
    - name: "baseline"
      type: "gboolean"
    - name: "restart"
      type: "gint"
    - name: "dct"
      type: "gchararray"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-iptc"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
    - name: "include-color-profile"
      type: "gboolean"
    - name: "include-thumbnail"
      type: "gboolean"
    - name: "include-comment"
      type: "gboolean"
  example_call: "file-jpeg-export(run-mode, image, file, options, quality, smoothing, optimize, progressive, cmyk, sub-sampling, baseline, restart, dct, include-exif, include-iptc, include-xmp, include-color-profile, include-thumbnail, include-comment)"

file-eps-export:
  blurb: "Export image as Encapsulated PostScript image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
    - name: "x-offset"
      type: "gdouble"
    - name: "y-offset"
      type: "gdouble"
    - name: "unit"
      type: "gchararray"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "rotation"
      type: "gint"
    - name: "level"
      type: "gboolean"
    - name: "eps-flag"
      type: "gboolean"
    - name: "show-preview"
      type: "gboolean"
    - name: "preview"
      type: "gint"
  example_call: "file-eps-export(run-mode, image, file, options, width, height, x-offset, y-offset, unit, keep-ratio, rotation, level, eps-flag, show-preview, preview)"

plug-in-dbbrowser:
  blurb: "List available procedures in the PDB"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "plug-in-dbbrowser(run-mode)"

gimp-drawable-posterize:
  blurb: "Posterize the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "levels"
      type: "gint"
  example_call: "gimp-drawable-posterize(drawable, levels)"

gimp-gradient-segment-range-split-midpoint:
  blurb: "Splits each segment in the segment range at midpoint"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-split-midpoint(gradient, start-segment, end-segment)"

script-fu-make-brush-rectangular-feathered:
  blurb: "Create a rectangular brush with feathered edges"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "adjustment-4"
      type: "gdouble"
  example_call: "script-fu-make-brush-rectangular-feathered(run-mode, string, adjustment, adjustment-2, adjustment-3, adjustment-4)"

gimp-image-get-tattoo-state:
  blurb: "Returns the tattoo state associated with the image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-tattoo-state(image)"

file-gif-load-thumb:
  blurb: "Loads only the first frame of a GIF image, to be used as a thumbnail"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-gif-load-thumb(file, thumb-size)"

gimp-image-merge-down:
  blurb: "Merge the layer passed and the first visible layer below."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "merge-layer"
      type: "GimpLayer"
    - name: "merge-type"
      type: "GimpMergeType"
  example_call: "gimp-image-merge-down(image, merge-layer, merge-type)"

file-icns-load-thumb:
  blurb: "Loads a preview from an Apple Icon Image file"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-icns-load-thumb(file, thumb-size)"

gimp-channel-set-color:
  blurb: "Set the compositing color of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-channel-set-color(channel, color)"

plug-in-nl-filter:
  blurb: "Nonlinear swiss army knife filter"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "alpha"
      type: "gdouble"
    - name: "radius"
      type: "gdouble"
    - name: "filter"
      type: "gchararray"
  example_call: "plug-in-nl-filter(run-mode, image, drawables, alpha, radius, filter)"

file-tiff-export:
  blurb: "Exports files in the TIFF or BigTIFF file formats"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "bigtiff"
      type: "gboolean"
    - name: "compression"
      type: "gchararray"
    - name: "save-transparent-pixels"
      type: "gboolean"
    - name: "cmyk"
      type: "gboolean"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-iptc"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
    - name: "include-color-profile"
      type: "gboolean"
    - name: "include-thumbnail"
      type: "gboolean"
    - name: "include-comment"
      type: "gboolean"
  example_call: "file-tiff-export(run-mode, image, file, options, bigtiff, compression, save-transparent-pixels, cmyk, include-exif, include-iptc, include-xmp, include-color-profile, include-thumbnail, include-comment)"

gimp-smudge-default:
  blurb: "Smudge image with varying pressure."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-smudge-default(drawable, strokes)"

gimp-help-concepts-usage:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-concepts-usage(run-mode)"

gimp-eraser-default:
  blurb: "Erase using the current brush."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-eraser-default(drawable, strokes)"

gimp-layer-create-mask:
  blurb: "Create a layer mask for the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "mask-type"
      type: "GimpAddMaskType"
  example_call: "gimp-layer-create-mask(layer, mask-type)"

gimp-pattern-get-info:
  blurb: "Gets information about the pattern."
  arguments:
    - name: "pattern"
      type: "GimpPattern"
  example_call: "gimp-pattern-get-info(pattern)"

gimp-context-set-default-colors:
  blurb: "Set the current GIMP foreground and background colors to black and white."
  arguments:
  example_call: "gimp-context-set-default-colors()"

gimp-context-set-brush-force:
  blurb: "Set brush application force."
  arguments:
    - name: "force"
      type: "gdouble"
  example_call: "gimp-context-set-brush-force(force)"

gimp-edit-named-copy-visible:
  blurb: "Copy from the projection into a named buffer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-edit-named-copy-visible(image, buffer-name)"

gimp-context-set-ink-size-sensitivity:
  blurb: "Set ink size sensitivity."
  arguments:
    - name: "size"
      type: "gdouble"
  example_call: "gimp-context-set-ink-size-sensitivity(size)"

python-fu-eval:
  blurb: "Evaluate Python code"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "script"
      type: "gchararray"
  example_call: "python-fu-eval(run-mode, script)"

gimp-layer-scale:
  blurb: "Scale the layer using the default interpolation method."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
    - name: "local-origin"
      type: "gboolean"
  example_call: "gimp-layer-scale(layer, new-width, new-height, local-origin)"

gimp-gradient-segment-range-blend-opacity:
  blurb: "Blend the opacity of the segment range."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-blend-opacity(gradient, start-segment, end-segment)"

gimp-drawable-curves-explicit:
  blurb: "Modifies the intensity curve(s) for specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "channel"
      type: "GimpHistogramChannel"
    - name: "values"
      type: "GimpDoubleArray"
  example_call: "gimp-drawable-curves-explicit(drawable, channel, values)"

gimp-context-set-background:
  blurb: "Set the current GIMP background color."
  arguments:
    - name: "background"
      type: "GeglColor"
  example_call: "gimp-context-set-background(background)"

gimp-image-convert-precision:
  blurb: "Convert the image to the specified precision"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "precision"
      type: "GimpPrecision"
  example_call: "gimp-image-convert-precision(image, precision)"

gimp-layer-get-blend-space:
  blurb: "Get the blend space of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-blend-space(layer)"

gimp-drawable-edit-fill:
  blurb: "Fill selected area of drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "fill-type"
      type: "GimpFillType"
  example_call: "gimp-drawable-edit-fill(drawable, fill-type)"

gimp-font-get-by-name:
  blurb: "Returns a font with the given name."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-font-get-by-name(name)"

file-raw-placeholder-kodak-load:
  blurb: "Load files in the Kodak raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-kodak-load(run-mode, file)"

gimp-brushes-refresh:
  blurb: "Refresh current brushes. This function always succeeds."
  arguments:
  example_call: "gimp-brushes-refresh()"

gimp-context-set-feather:
  blurb: "Set the feather setting."
  arguments:
    - name: "feather"
      type: "gboolean"
  example_call: "gimp-context-set-feather(feather)"

gimp-edit-named-copy:
  blurb: "Copy into a named buffer."
  arguments:
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-edit-named-copy(drawables, buffer-name)"

file-j2k-load:
  blurb: "Loads JPEG 2000 codestream."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "colorspace"
      type: "gchararray"
  example_call: "file-j2k-load(run-mode, file, colorspace)"

gimp-gradient-segment-range-set-coloring-type:
  blurb: "Sets the coloring type of a range of segments"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
    - name: "coloring-type"
      type: "GimpGradientSegmentColor"
  example_call: "gimp-gradient-segment-range-set-coloring-type(gradient, start-segment, end-segment, coloring-type)"

gimp-buffer-rename:
  blurb: "Renames a named buffer."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
    - name: "new-name"
      type: "gchararray"
  example_call: "gimp-buffer-rename(buffer-name, new-name)"

gimp-context-set-distance-metric:
  blurb: "Set the distance metric used in some computations."
  arguments:
    - name: "metric"
      type: "GeglDistanceMetric"
  example_call: "gimp-context-set-distance-metric(metric)"

plug-in-animationoptimize:
  blurb: "Modify image to reduce size when saved as GIF animation"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-animationoptimize(run-mode, image, drawables)"

plug-in-spyrogimp:
  blurb: "Draw spyrographs using current tool settings and selection."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "curve-type"
      type: "gchararray"
    - name: "shape"
      type: "gchararray"
    - name: "sides"
      type: "gint"
    - name: "morph"
      type: "gdouble"
    - name: "fixed-teeth"
      type: "gint"
    - name: "moving-teeth"
      type: "gint"
    - name: "hole-percent"
      type: "gdouble"
    - name: "margin"
      type: "gint"
    - name: "equal-w-h"
      type: "gboolean"
    - name: "pattern-rotation"
      type: "gdouble"
    - name: "shape-rotation"
      type: "gdouble"
    - name: "tool"
      type: "gchararray"
    - name: "long-gradient"
      type: "gboolean"
  example_call: "plug-in-spyrogimp(run-mode, image, drawables, curve-type, shape, sides, morph, fixed-teeth, moving-teeth, hole-percent, margin, equal-w-h, pattern-rotation, shape-rotation, tool, long-gradient)"

gimp-context-get-stroke-method:
  blurb: "Get the currently active stroke method."
  arguments:
  example_call: "gimp-context-get-stroke-method()"

file-raw-placeholder-rwl-load:
  blurb: "Load files in the RWL raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-rwl-load(run-mode, file)"

gimp-clone:
  blurb: "Clone from the source to the dest drawable using the current brush"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "src-drawable"
      type: "GimpDrawable"
    - name: "clone-type"
      type: "GimpCloneType"
    - name: "src-x"
      type: "gdouble"
    - name: "src-y"
      type: "gdouble"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-clone(drawable, src-drawable, clone-type, src-x, src-y, strokes)"

gimp-file-save:
  blurb: "Saves to XCF or export @image to any supported format by extension."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "gimp-file-save(run-mode, image, file, options)"

script-fu-round-corners:
  blurb: "Round the corners of an image and optionally add a drop-shadow and background"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "adjustment-4"
      type: "gint"
    - name: "toggle-2"
      type: "gboolean"
    - name: "toggle-3"
      type: "gboolean"
  example_call: "script-fu-round-corners(run-mode, image, drawables, adjustment, toggle, adjustment-2, adjustment-3, adjustment-4, toggle-2, toggle-3)"

gimp-online-roadmap:
  blurb: "Bookmark to the roadmaps of GIMP"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-online-roadmap(run-mode)"

gimp-gradient-segment-range-split-uniform:
  blurb: "Splits each segment in the segment range uniformly"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
    - name: "split-parts"
      type: "gint"
  example_call: "gimp-gradient-segment-range-split-uniform(gradient, start-segment, end-segment, split-parts)"

gimp-item-get-lock-position:
  blurb: "Get the 'lock position' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-lock-position(item)"

gimp-drawable-color-balance:
  blurb: "Modify the color balance of the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "transfer-mode"
      type: "GimpTransferMode"
    - name: "preserve-lum"
      type: "gboolean"
    - name: "cyan-red"
      type: "gdouble"
    - name: "magenta-green"
      type: "gdouble"
    - name: "yellow-blue"
      type: "gdouble"
  example_call: "gimp-drawable-color-balance(drawable, transfer-mode, preserve-lum, cyan-red, magenta-green, yellow-blue)"

plug-in-screenshot:
  blurb: "Create an image from an area of the screen"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "shoot-type"
      type: "gchararray"
    - name: "x1"
      type: "gint"
    - name: "y1"
      type: "gint"
    - name: "x2"
      type: "gint"
    - name: "y2"
      type: "gint"
    - name: "include-pointer"
      type: "gboolean"
    - name: "color-profile"
      type: "gchararray"
  example_call: "plug-in-screenshot(run-mode, shoot-type, x1, y1, x2, y2, include-pointer, color-profile)"

gimp-xcf-save:
  blurb: "Saves file in the .xcf file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-xcf-save(run-mode, image, file)"

gimp-gradient-segment-get-coloring-type:
  blurb: "Gets the gradient segment's coloring type"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-coloring-type(gradient, segment)"

file-wmf-load-thumb:
  blurb: "Loads a small preview from a WMF image"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-wmf-load-thumb(file, thumb-size)"

plug-in-busy-dialog:
  blurb: "Show a dialog while waiting for an operation to finish"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "read-fd"
      type: "gint"
    - name: "write-fd"
      type: "gint"
    - name: "message"
      type: "gchararray"
    - name: "cancelable"
      type: "gboolean"
  example_call: "plug-in-busy-dialog(run-mode, read-fd, write-fd, message, cancelable)"

gimp-display-present:
  blurb: "Present the specified display."
  arguments:
    - name: "display"
      type: "GimpDisplay"
  example_call: "gimp-display-present(display)"

gimp-gradients-get-list:
  blurb: "Retrieve the list of loaded gradients."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-gradients-get-list(filter)"

gimp-drawable-free-shadow:
  blurb: "Free the specified drawable's shadow data (if it exists)."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-free-shadow(drawable)"

gimp-drawable-offset:
  blurb: "Offset the drawable by the specified amounts in the X and Y directions"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "wrap-around"
      type: "gboolean"
    - name: "fill-type"
      type: "GimpOffsetType"
    - name: "color"
      type: "GeglColor"
    - name: "offset-x"
      type: "gint"
    - name: "offset-y"
      type: "gint"
  example_call: "gimp-drawable-offset(drawable, wrap-around, fill-type, color, offset-x, offset-y)"

plug-in-metadata-editor:
  blurb: "Edit metadata (IPTC, EXIF, XMP)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "parent-handle"
      type: "GBytes"
  example_call: "plug-in-metadata-editor(run-mode, image, drawables, parent-handle)"

gimp-gradients-popup:
  blurb: "Invokes the Gimp gradients selection dialog."
  arguments:
    - name: "gradient-callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "initial-gradient"
      type: "GimpGradient"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-gradients-popup(gradient-callback, popup-title, initial-gradient, parent-window)"

gimp-floating-sel-to-layer:
  blurb: "Transforms the specified floating selection into a layer."
  arguments:
    - name: "floating-sel"
      type: "GimpLayer"
  example_call: "gimp-floating-sel-to-layer(floating-sel)"

plug-in-sparkle:
  blurb: "Turn bright spots into starry sparkles"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "lum-threshold"
      type: "gdouble"
    - name: "flare-inten"
      type: "gdouble"
    - name: "spike-len"
      type: "gint"
    - name: "spike-points"
      type: "gint"
    - name: "spike-angle"
      type: "gint"
    - name: "density"
      type: "gdouble"
    - name: "transparency"
      type: "gdouble"
    - name: "random-hue"
      type: "gdouble"
    - name: "random-saturation"
      type: "gdouble"
    - name: "preserve-luminosity"
      type: "gboolean"
    - name: "inverse"
      type: "gboolean"
    - name: "border"
      type: "gboolean"
    - name: "color-type"
      type: "gchararray"
  example_call: "plug-in-sparkle(run-mode, image, drawables, lum-threshold, flare-inten, spike-len, spike-points, spike-angle, density, transparency, random-hue, random-saturation, preserve-luminosity, inverse, border, color-type)"

gimp-image-set-component-visible:
  blurb: "Sets if the specified image's image component is visible."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "component"
      type: "GimpChannelType"
    - name: "visible"
      type: "gboolean"
  example_call: "gimp-image-set-component-visible(image, component, visible)"

gimp-image-rotate:
  blurb: "Rotates the image by the specified degrees."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "rotate-type"
      type: "GimpRotationType"
  example_call: "gimp-image-rotate(image, rotate-type)"

gimp-help-using-selections:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-selections(run-mode)"

gimp-drawable-curves-spline:
  blurb: "Modifies the intensity curve(s) for specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "channel"
      type: "GimpHistogramChannel"
    - name: "points"
      type: "GimpDoubleArray"
  example_call: "gimp-drawable-curves-spline(drawable, channel, points)"

gimp-path-bezier-stroke-conicto:
  blurb: "Extends a bezier stroke with a conic bezier spline."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
  example_call: "gimp-path-bezier-stroke-conicto(path, stroke-id, x0, y0, x1, y1)"

plug-in-film:
  blurb: "Combine several images on a film strip"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "film-height"
      type: "gint"
    - name: "film-color"
      type: "GeglColor"
    - name: "number-start"
      type: "gint"
    - name: "number-font"
      type: "GimpFont"
    - name: "number-color"
      type: "GeglColor"
    - name: "at-top"
      type: "gboolean"
    - name: "at-bottom"
      type: "gboolean"
    - name: "images"
      type: "GimpCoreObjectArray"
    - name: "picture-height"
      type: "gdouble"
    - name: "picture-spacing"
      type: "gdouble"
    - name: "hole-offset"
      type: "gdouble"
    - name: "hole-width"
      type: "gdouble"
    - name: "hole-height"
      type: "gdouble"
    - name: "hole-spacing"
      type: "gdouble"
    - name: "number-height"
      type: "gdouble"
  example_call: "plug-in-film(run-mode, image, drawables, film-height, film-color, number-start, number-font, number-color, at-top, at-bottom, images, picture-height, picture-spacing, hole-offset, hole-width, hole-height, hole-spacing, number-height)"

script-fu-guide-new:
  blurb: "Add a guide at the orientation and position specified (in pixels)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "option"
      type: "gint"
    - name: "adjustment"
      type: "gint"
  example_call: "script-fu-guide-new(run-mode, image, drawables, option, adjustment)"

gimp-context-set-line-dash-offset:
  blurb: "Set the line dash offset setting."
  arguments:
    - name: "dash-offset"
      type: "gdouble"
  example_call: "gimp-context-set-line-dash-offset(dash-offset)"

gimp-context-set-line-width-unit:
  blurb: "Set the line width unit setting."
  arguments:
    - name: "line-width-unit"
      type: "GimpUnit"
  example_call: "gimp-context-set-line-width-unit(line-width-unit)"

gimp-brush-get-shape:
  blurb: "Gets the shape of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-shape(brush)"

gimp-layer-add-alpha:
  blurb: "Add an alpha channel to the layer if it doesn't already have one."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-add-alpha(layer)"

script-fu-old-photo:
  blurb: "Make an image look like an old photo"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "toggle"
      type: "gboolean"
    - name: "adjustment"
      type: "gint"
    - name: "toggle-2"
      type: "gboolean"
    - name: "toggle-3"
      type: "gboolean"
    - name: "toggle-4"
      type: "gboolean"
  example_call: "script-fu-old-photo(run-mode, image, drawables, toggle, adjustment, toggle-2, toggle-3, toggle-4)"

gimp-context-set-ink-blob-angle:
  blurb: "Set ink blob angle in degrees."
  arguments:
    - name: "angle"
      type: "gdouble"
  example_call: "gimp-context-set-ink-blob-angle(angle)"

gimp-palettes-refresh:
  blurb: "Refreshes current palettes. This function always succeeds."
  arguments:
  example_call: "gimp-palettes-refresh()"

gimp-gradient-segment-range-redistribute-handles:
  blurb: "Uniformly redistribute the segment range's handles"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-redistribute-handles(gradient, start-segment, end-segment)"

gimp-context-set-brush-default-size:
  blurb: "Set brush size to its default."
  arguments:
  example_call: "gimp-context-set-brush-default-size()"

gimp-text-layer-get-line-spacing:
  blurb: "Get the spacing between lines of text."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-line-spacing(layer)"

gimp-fonts-get-list:
  blurb: "Retrieve the list of loaded fonts."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-fonts-get-list(filter)"

gimp-get-monitor-resolution:
  blurb: "Get the monitor resolution as specified in the Preferences."
  arguments:
  example_call: "gimp-get-monitor-resolution()"

gimp-context-get-distance-metric:
  blurb: "Get the distance metric used in some computations."
  arguments:
  example_call: "gimp-context-get-distance-metric()"

gimp-image-grid-get-style:
  blurb: "Gets the style of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-grid-get-style(image)"

gimp-context-set-brush-angle:
  blurb: "Set brush angle in degrees."
  arguments:
    - name: "angle"
      type: "gdouble"
  example_call: "gimp-context-set-brush-angle(angle)"

file-xwd-load:
  blurb: "Loads files in the XWD (X Window Dump) format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-xwd-load(run-mode, file)"

file-svg-load:
  blurb: "Loads files in the SVG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "prefer-native-dimensions"
      type: "gboolean"
    - name: "paths"
      type: "gchararray"
  example_call: "file-svg-load(run-mode, file, width, height, keep-ratio, prefer-native-dimensions, paths)"

gimp-gradient-segment-get-middle-pos:
  blurb: "Gets the midpoint position of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-middle-pos(gradient, segment)"

file-ps-export:
  blurb: "Export image as PostScript document"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
    - name: "x-offset"
      type: "gdouble"
    - name: "y-offset"
      type: "gdouble"
    - name: "unit"
      type: "gchararray"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "rotation"
      type: "gint"
    - name: "level"
      type: "gboolean"
    - name: "eps-flag"
      type: "gboolean"
    - name: "show-preview"
      type: "gboolean"
    - name: "preview"
      type: "gint"
  example_call: "file-ps-export(run-mode, image, file, options, width, height, x-offset, y-offset, unit, keep-ratio, rotation, level, eps-flag, show-preview, preview)"

script-fu-paste-as-brush:
  blurb: "Paste the clipboard contents into a new brush"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "string-2"
      type: "gchararray"
    - name: "adjustment"
      type: "gdouble"
  example_call: "script-fu-paste-as-brush(run-mode, string, string-2, adjustment)"

gimp-image-thaw-paths:
  blurb: "Thaw the image's path list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-thaw-paths(image)"

gimp-palette-export-css:
  blurb: "Export the active palette as a CSS stylesheet with the color entry name as their class name, and the color itself as the color attribute"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "dirname"
      type: "GFile"
    - name: "string"
      type: "gchararray"
  example_call: "gimp-palette-export-css(run-mode, dirname, string)"

gimp-drawables-close-popup:
  blurb: "Close the drawable selection dialog."
  arguments:
    - name: "callback"
      type: "gchararray"
  example_call: "gimp-drawables-close-popup(callback)"

file-raw-placeholder-pxn-load:
  blurb: "Load files in the PXN raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-pxn-load(run-mode, file)"

gimp-image-remove-layer:
  blurb: "Remove the specified layer from the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-image-remove-layer(image, layer)"

gimp-context-set-line-join-style:
  blurb: "Set the line join style setting."
  arguments:
    - name: "join-style"
      type: "GimpJoinStyle"
  example_call: "gimp-context-set-line-join-style(join-style)"

script-fu-set-cmap:
  blurb: "Change the colormap of an image to the colors in a specified palette."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "palette"
      type: "GimpPalette"
  example_call: "script-fu-set-cmap(run-mode, image, drawables, palette)"

gimp-context-set-brush-size:
  blurb: "Set brush size in pixels."
  arguments:
    - name: "size"
      type: "gdouble"
  example_call: "gimp-context-set-brush-size(size)"

gimp-gradients-set-popup:
  blurb: "Sets the current gradient in a gradient selection dialog."
  arguments:
    - name: "gradient-callback"
      type: "gchararray"
    - name: "gradient"
      type: "GimpGradient"
  example_call: "gimp-gradients-set-popup(gradient-callback, gradient)"

gimp-drawable-type-with-alpha:
  blurb: "Returns the drawable's type with alpha."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-type-with-alpha(drawable)"

file-ico-load-thumb:
  blurb: "Loads a preview from a Windows ICO or CUR files"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-ico-load-thumb(file, thumb-size)"

gimp-get-images:
  blurb: "Returns the list of images currently open."
  arguments:
  example_call: "gimp-get-images()"

gimp-gradient-segment-get-right-pos:
  blurb: "Gets the right endpoint position of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-right-pos(gradient, segment)"

gimp-paintbrush-default:
  blurb: "Paint in the current brush. The fade out parameter and pull colors from a gradient parameter are set from the paintbrush options dialog. If this dialog has not been activated then the dialog defaults will be used."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-paintbrush-default(drawable, strokes)"

script-fu-waves-anim:
  blurb: "Create a multi-layer image with an effect like a stone was thrown into the current image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "adjustment-3"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-waves-anim(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, toggle)"

gimp-drawable-is-gray:
  blurb: "Returns whether the drawable is a grayscale type."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-is-gray(drawable)"

file-xz-export:
  blurb: "saves files compressed with xz"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-xz-export(run-mode, image, file, options)"

gimp-unit-new:
  blurb: "Creates a new unit."
  arguments:
    - name: "name"
      type: "gchararray"
    - name: "factor"
      type: "gdouble"
    - name: "digits"
      type: "gint"
    - name: "symbol"
      type: "gchararray"
    - name: "abbreviation"
      type: "gchararray"
  example_call: "gimp-unit-new(name, factor, digits, symbol, abbreviation)"

gimp-context-set-gradient-repeat-mode:
  blurb: "Set the gradient repeat mode."
  arguments:
    - name: "repeat-mode"
      type: "GimpRepeatMode"
  example_call: "gimp-context-set-gradient-repeat-mode(repeat-mode)"

gimp-palettes-get-list:
  blurb: "Retrieves a list of all of the available palettes"
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-palettes-get-list(filter)"

plug-in-gradmap:
  blurb: "Recolor the image using colors from the active gradient"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-gradmap(run-mode, image, drawables)"

file-tga-load:
  blurb: "Loads files of Targa file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-tga-load(run-mode, file)"

gimp-gimprc-set:
  blurb: "Sets a gimprc token to a value and saves it in the gimprc."
  arguments:
    - name: "token"
      type: "gchararray"
    - name: "value"
      type: "gchararray"
  example_call: "gimp-gimprc-set(token, value)"

file-farbfeld-load:
  blurb: "Load file in the Farbfeld file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-farbfeld-load(run-mode, file)"

script-fu-test-sphere-v3:
  blurb: "Plug-in example in Scheme"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "toggle"
      type: "gboolean"
    - name: "color"
      type: "GeglColor"
    - name: "color-2"
      type: "GeglColor"
    - name: "brush"
      type: "GimpBrush"
    - name: "string"
      type: "gchararray"
    - name: "text"
      type: "gchararray"
    - name: "pattern"
      type: "GimpPattern"
    - name: "gradient"
      type: "GimpGradient"
    - name: "toggle-2"
      type: "gboolean"
    - name: "font"
      type: "GimpFont"
    - name: "adjustment-3"
      type: "gint"
    - name: "palette"
      type: "GimpPalette"
    - name: "filename"
      type: "GFile"
    - name: "option"
      type: "gint"
    - name: "enum"
      type: "GimpInterpolationType"
    - name: "dirname"
      type: "GFile"
    - name: "otherImage"
      type: "GimpImage"
    - name: "layer"
      type: "GimpLayer"
    - name: "channel"
      type: "GimpChannel"
    - name: "drawable"
      type: "GimpDrawable"
    - name: "vectors"
      type: "GimpPath"
  example_call: "script-fu-test-sphere-v3(run-mode, image, drawables, adjustment, adjustment-2, toggle, color, color-2, brush, string, text, pattern, gradient, toggle-2, font, adjustment-3, palette, filename, option, enum, dirname, otherImage, layer, channel, drawable, vectors)"

gimp-layer-get-mask:
  blurb: "Get the specified layer's mask if it exists."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-mask(layer)"

gimp-resource-id-is-palette:
  blurb: "Returns whether the resource ID is a palette."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-palette(resource-id)"

gimp-brush-set-hardness:
  blurb: "Sets the hardness of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "hardness-in"
      type: "gdouble"
  example_call: "gimp-brush-set-hardness(brush, hardness-in)"

gimp-image-import-paths-from-string:
  blurb: "Import paths from an SVG string."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "string"
      type: "gchararray"
    - name: "length"
      type: "gint"
    - name: "merge"
      type: "gboolean"
    - name: "scale"
      type: "gboolean"
  example_call: "gimp-image-import-paths-from-string(image, string, length, merge, scale)"

gimp-patterns-refresh:
  blurb: "Refresh current patterns. This function always succeeds."
  arguments:
  example_call: "gimp-patterns-refresh()"

extension-script-fu:
  blurb: "A scheme interpreter for scripting GIMP operations"
  arguments:
  example_call: "extension-script-fu()"

gimp-context-set-ink-blob-type:
  blurb: "Set ink blob type."
  arguments:
    - name: "type"
      type: "GimpInkBlobType"
  example_call: "gimp-context-set-ink-blob-type(type)"

gimp-image-set-resolution:
  blurb: "Sets the specified image's resolution."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "xresolution"
      type: "gdouble"
    - name: "yresolution"
      type: "gdouble"
  example_call: "gimp-image-set-resolution(image, xresolution, yresolution)"

gimp-context-set-font:
  blurb: "Set the active font."
  arguments:
    - name: "font"
      type: "GimpFont"
  example_call: "gimp-context-set-font(font)"

gimp-buffers-get-name-list:
  blurb: "Retrieve a complete listing of the available buffers."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-buffers-get-name-list(filter)"

gimp-image-remove-channel:
  blurb: "Remove the specified channel from the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "channel"
      type: "GimpChannel"
  example_call: "gimp-image-remove-channel(image, channel)"

gimp-image-freeze-paths:
  blurb: "Freeze the image's path list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-freeze-paths(image)"

gimp-context-set-sample-merged:
  blurb: "Set the sample merged setting."
  arguments:
    - name: "sample-merged"
      type: "gboolean"
  example_call: "gimp-context-set-sample-merged(sample-merged)"

gimp-resource-id-is-font:
  blurb: "Returns whether the resource ID is a font."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-font(resource-id)"

gimp-item-transform-rotate:
  blurb: "Rotate the specified item about given coordinates through the specified angle."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "angle"
      type: "gdouble"
    - name: "auto-center"
      type: "gboolean"
    - name: "center-x"
      type: "gdouble"
    - name: "center-y"
      type: "gdouble"
  example_call: "gimp-item-transform-rotate(item, angle, auto-center, center-x, center-y)"

gimp-image-attach-parasite:
  blurb: "Add a parasite to an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "parasite"
      type: "GimpParasite"
  example_call: "gimp-image-attach-parasite(image, parasite)"

gimp-selection-save:
  blurb: "Copy the selection mask to a new channel."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-save(image)"

gimp-path-stroke-get-points:
  blurb: "returns the control points of a stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
  example_call: "gimp-path-stroke-get-points(path, stroke-id)"

plug-in-wavelet-decompose:
  blurb: "Wavelet decompose"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "scales"
      type: "gint"
    - name: "create-group"
      type: "gboolean"
    - name: "create-masks"
      type: "gboolean"
  example_call: "plug-in-wavelet-decompose(run-mode, image, drawables, scales, create-group, create-masks)"

gimp-gimprc-query:
  blurb: "Queries the gimprc file parser for information on a specified token."
  arguments:
    - name: "token"
      type: "gchararray"
  example_call: "gimp-gimprc-query(token)"

plug-in-jigsaw:
  blurb: "Add a jigsaw-puzzle pattern to the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "x"
      type: "gint"
    - name: "y"
      type: "gint"
    - name: "style"
      type: "gchararray"
    - name: "blend-lines"
      type: "gint"
    - name: "blend-amount"
      type: "gdouble"
  example_call: "plug-in-jigsaw(run-mode, image, drawables, x, y, style, blend-lines, blend-amount)"

script-fu-burn-in-anim:
  blurb: "Create intermediate layers to produce an animated 'burn-in' transition between two layers"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "color"
      type: "GeglColor"
    - name: "toggle"
      type: "gboolean"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "toggle-2"
      type: "gboolean"
    - name: "toggle-3"
      type: "gboolean"
    - name: "adjustment-4"
      type: "gint"
  example_call: "script-fu-burn-in-anim(run-mode, image, drawables, color, toggle, adjustment, adjustment-2, adjustment-3, toggle-2, toggle-3, adjustment-4)"

gimp-brush-get-info:
  blurb: "Gets information about the brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-info(brush)"

file-fits-export:
  blurb: "Export file in the FITS file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-fits-export(run-mode, image, file, options)"

gimp-context-set-line-width:
  blurb: "Set the line width setting."
  arguments:
    - name: "line-width"
      type: "gdouble"
  example_call: "gimp-context-set-line-width(line-width)"

gimp-layer-set-composite-mode:
  blurb: "Set the composite mode of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "composite-mode"
      type: "GimpLayerCompositeMode"
  example_call: "gimp-layer-set-composite-mode(layer, composite-mode)"

plug-in-flame:
  blurb: "Create cosmic recursive fractal flames"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "brightness"
      type: "gdouble"
    - name: "contrast"
      type: "gdouble"
    - name: "gamma"
      type: "gdouble"
    - name: "sample-density"
      type: "gdouble"
    - name: "spatial-oversample"
      type: "gint"
    - name: "spatial-filter-radius"
      type: "gdouble"
    - name: "zoom"
      type: "gdouble"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
  example_call: "plug-in-flame(run-mode, image, drawables, brightness, contrast, gamma, sample-density, spatial-oversample, spatial-filter-radius, zoom, x, y)"

gimp-context-get-paint-method:
  blurb: "Get the currently active paint method."
  arguments:
  example_call: "gimp-context-get-paint-method()"

gimp-brush-get-hardness:
  blurb: "Gets the hardness of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-hardness(brush)"

gimp-image-grid-set-offset:
  blurb: "Sets the offset of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "xoffset"
      type: "gdouble"
    - name: "yoffset"
      type: "gdouble"
  example_call: "gimp-image-grid-set-offset(image, xoffset, yoffset)"

gimp-help-concepts-paths:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-concepts-paths(run-mode)"

gimp-layer-is-floating-sel:
  blurb: "Is the specified layer a floating selection?"
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-is-floating-sel(layer)"

python-fu-foggify:
  blurb: "Add a layer of fog"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "name"
      type: "gchararray"
    - name: "color"
      type: "GeglColor"
    - name: "turbulence"
      type: "gdouble"
    - name: "opacity"
      type: "gdouble"
  example_call: "python-fu-foggify(run-mode, image, drawables, name, color, turbulence, opacity)"

gimp-brush-set-shape:
  blurb: "Sets the shape of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "shape-in"
      type: "GimpBrushGeneratedShape"
  example_call: "gimp-brush-set-shape(brush, shape-in)"

script-fu-guides-from-selection:
  blurb: "Create four guides around the bounding box of the current selection"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "script-fu-guides-from-selection(run-mode, image, drawables)"

gimp-image-undo-group-start:
  blurb: "Starts a group undo."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-group-start(image)"

file-raw-placeholder-rdc-load:
  blurb: "Load files in the RDC raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-rdc-load(run-mode, file)"

file-pix-export:
  blurb: "Export file in the Alias|Wavefront pix/matte file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-pix-export(run-mode, image, file, options)"

gimp-drawable-has-alpha:
  blurb: "Returns TRUE if the drawable has an alpha channel."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-has-alpha(drawable)"

gimp-image-merge-visible-layers:
  blurb: "Merge the visible image layers into one."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "merge-type"
      type: "GimpMergeType"
  example_call: "gimp-image-merge-visible-layers(image, merge-type)"

gimp-item-set-lock-position:
  blurb: "Set the 'lock position' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "lock-position"
      type: "gboolean"
  example_call: "gimp-item-set-lock-position(item, lock-position)"

gimp-drawable-is-rgb:
  blurb: "Returns whether the drawable is an RGB type."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-is-rgb(drawable)"

gimp-layer-remove-mask:
  blurb: "Remove the specified layer mask from the layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "mode"
      type: "GimpMaskApplyMode"
  example_call: "gimp-layer-remove-mask(layer, mode)"

gimp-image-grid-set-style:
  blurb: "Sets the style unit of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "style"
      type: "GimpGridStyle"
  example_call: "gimp-image-grid-set-style(image, style)"

gimp-gradient-segment-get-right-color:
  blurb: "Gets the right endpoint color of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-right-color(gradient, segment)"

gimp-drawable-get-bpp:
  blurb: "Returns the bytes per pixel."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-get-bpp(drawable)"

gimp-temp-file:
  blurb: "Generates a unique temporary file."
  arguments:
    - name: "extension"
      type: "gchararray"
  example_call: "gimp-temp-file(extension)"

gimp-context-get-line-miter-limit:
  blurb: "Get the line miter limit setting."
  arguments:
  example_call: "gimp-context-get-line-miter-limit()"

gimp-group-layer-new:
  blurb: "Create a new group layer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-group-layer-new(image, name)"

python-fu-palette-to-gradient-repeating:
  blurb: "Create a repeating gradient using colors from the palette"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "palette"
      type: "GimpPalette"
  example_call: "python-fu-palette-to-gradient-repeating(run-mode, palette)"

script-fu-xach-effect:
  blurb: "Add a subtle translucent 3D effect to the selected region (or alpha)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "color"
      type: "GeglColor"
    - name: "adjustment-3"
      type: "gint"
    - name: "color-2"
      type: "GeglColor"
    - name: "adjustment-4"
      type: "gint"
    - name: "adjustment-5"
      type: "gint"
    - name: "adjustment-6"
      type: "gint"
    - name: "adjustment-7"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-xach-effect(run-mode, image, drawables, adjustment, adjustment-2, color, adjustment-3, color-2, adjustment-4, adjustment-5, adjustment-6, adjustment-7, toggle)"

gimp-image-get-parasite-list:
  blurb: "List all parasites."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-parasite-list(image)"

script-fu-clothify:
  blurb: "Add a cloth-like texture to the selected region (or alpha)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gdouble"
    - name: "adjustment-4"
      type: "gdouble"
    - name: "adjustment-5"
      type: "gint"
  example_call: "script-fu-clothify(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, adjustment-4, adjustment-5)"

plug-in-animationplay:
  blurb: "Preview a GIMP layer-based animation"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-animationplay(run-mode, image, drawables)"

gimp-context-get-sample-transparent:
  blurb: "Get the sample transparent setting."
  arguments:
  example_call: "gimp-context-get-sample-transparent()"

gimp-image-resize:
  blurb: "Resize the image to the specified extents."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-image-resize(image, new-width, new-height, offx, offy)"

gimp-item-get-lock-visibility:
  blurb: "Get the 'lock visibility' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-lock-visibility(item)"

file-gif-load:
  blurb: "Loads files of Compuserve GIF file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-gif-load(run-mode, file)"

file-heif-load:
  blurb: "Loads HEIF images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-heif-load(run-mode, file)"

file-pcx-load:
  blurb: "Loads files in Zsoft PCX file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "override-palette"
      type: "gchararray"
  example_call: "file-pcx-load(run-mode, file, override-palette)"

gimp-image-set-simulation-bpc:
  blurb: "Sets whether the image has Black Point Compensation enabled for its simulation"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "bpc"
      type: "gboolean"
  example_call: "gimp-image-set-simulation-bpc(image, bpc)"

file-icns-export:
  blurb: "Saves files in Apple Icon Image file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "include-color-profile"
      type: "gboolean"
  example_call: "file-icns-export(run-mode, image, file, options, include-color-profile)"

gimp-image-raise-item:
  blurb: "Raise the specified item in its level in its item tree"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-raise-item(image, item)"

gimp-context-get-sample-criterion:
  blurb: "Get the sample criterion setting."
  arguments:
  example_call: "gimp-context-get-sample-criterion()"

gimp-image-get-width:
  blurb: "Return the width of the image"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-width(image)"

gimp-airbrush:
  blurb: "Paint in the current brush with varying pressure. Paint application is time-dependent."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "pressure"
      type: "gdouble"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-airbrush(drawable, pressure, strokes)"

plug-in-mail-image:
  blurb: "Send the image by email"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "filename"
      type: "gchararray"
    - name: "to-address"
      type: "gchararray"
    - name: "from-address"
      type: "gchararray"
    - name: "subject"
      type: "gchararray"
    - name: "comment"
      type: "gchararray"
  example_call: "plug-in-mail-image(run-mode, image, drawables, filename, to-address, from-address, subject, comment)"

gimp-selection-bounds:
  blurb: "Find the bounding box of the current selection."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-bounds(image)"

gimp-palette-get-columns:
  blurb: "Gets the number of columns used to display the palette"
  arguments:
    - name: "palette"
      type: "GimpPalette"
  example_call: "gimp-palette-get-columns(palette)"

gimp-path-new:
  blurb: "Creates a new empty path object."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-path-new(image, name)"

gimp-brushes-close-popup:
  blurb: "Close the brush selection dialog."
  arguments:
    - name: "brush-callback"
      type: "gchararray"
  example_call: "gimp-brushes-close-popup(brush-callback)"

gimp-image-grid-get-background-color:
  blurb: "Sets the background color of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-grid-get-background-color(image)"

gimp-image-policy-rotate:
  blurb: "Execute the "Orientation" metadata policy."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "interactive"
      type: "gboolean"
  example_call: "gimp-image-policy-rotate(image, interactive)"

plug-in-retinex:
  blurb: "Enhance contrast using the Retinex method"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "scale"
      type: "gint"
    - name: "nscales"
      type: "gint"
    - name: "scales-mode"
      type: "gchararray"
    - name: "cvar"
      type: "gdouble"
  example_call: "plug-in-retinex(run-mode, image, drawables, scale, nscales, scales-mode, cvar)"

gimp-drawable-levels:
  blurb: "Modifies intensity levels in the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "channel"
      type: "GimpHistogramChannel"
    - name: "low-input"
      type: "gdouble"
    - name: "high-input"
      type: "gdouble"
    - name: "clamp-input"
      type: "gboolean"
    - name: "gamma"
      type: "gdouble"
    - name: "low-output"
      type: "gdouble"
    - name: "high-output"
      type: "gdouble"
    - name: "clamp-output"
      type: "gboolean"
  example_call: "gimp-drawable-levels(drawable, channel, low-input, high-input, clamp-input, gamma, low-output, high-output, clamp-output)"

gimp-drawable-filter-get-opacity:
  blurb: "Get the opacity of the specified filter."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-get-opacity(filter)"

script-fu-selection-round:
  blurb: "This procedure is deprecated! Use 'script-fu-selection-rounded-rectangle' instead."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
  example_call: "script-fu-selection-round(run-mode, image, drawables, adjustment)"

gimp-eraser:
  blurb: "Erase using the current brush."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
    - name: "hardness"
      type: "GimpBrushApplicationMode"
    - name: "method"
      type: "GimpPaintApplicationMode"
  example_call: "gimp-eraser(drawable, strokes, hardness, method)"

gimp-context-get-dynamics-name:
  blurb: "Get the currently active paint dynamics."
  arguments:
  example_call: "gimp-context-get-dynamics-name()"

gimp-text-layer-get-kerning:
  blurb: "Check if kerning is used in the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-kerning(layer)"

file-raw-placeholder-pef-load:
  blurb: "Load files in the PEF raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-pef-load(run-mode, file)"

gimp-message-get-handler:
  blurb: "Returns the current state of where warning messages are displayed."
  arguments:
  example_call: "gimp-message-get-handler()"

python-fu-palette-sort:
  blurb: "Sort the colors in a palette"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "palette"
      type: "GimpPalette"
    - name: "selections"
      type: "gchararray"
    - name: "slice-expr"
      type: "gchararray"
    - name: "channel1"
      type: "gchararray"
    - name: "ascending1"
      type: "gboolean"
    - name: "channel2"
      type: "gchararray"
    - name: "ascending2"
      type: "gboolean"
    - name: "quantize"
      type: "gdouble"
    - name: "pchannel"
      type: "gchararray"
    - name: "pquantize"
      type: "gdouble"
  example_call: "python-fu-palette-sort(run-mode, palette, selections, slice-expr, channel1, ascending1, channel2, ascending2, quantize, pchannel, pquantize)"

gimp-path-stroke-rotate:
  blurb: "rotates the given stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "center-x"
      type: "gdouble"
    - name: "center-y"
      type: "gdouble"
    - name: "angle"
      type: "gdouble"
  example_call: "gimp-path-stroke-rotate(path, stroke-id, center-x, center-y, angle)"

file-bmp-load:
  blurb: "Loads files of Windows BMP file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-bmp-load(run-mode, file)"

gimp-context-get-feather-radius:
  blurb: "Get the feather radius setting."
  arguments:
  example_call: "gimp-context-get-feather-radius()"

gimp-paintbrush:
  blurb: "Paint in the current brush with optional fade out parameter and pull colors from a gradient."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "fade-out"
      type: "gdouble"
    - name: "strokes"
      type: "GimpDoubleArray"
    - name: "method"
      type: "GimpPaintApplicationMode"
    - name: "gradient-length"
      type: "gdouble"
  example_call: "gimp-paintbrush(drawable, fade-out, strokes, method, gradient-length)"

file-heif-av1-load:
  blurb: "Loads AVIF images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-heif-av1-load(run-mode, file)"

gimp-displays-reconnect:
  blurb: "Reconnect displays from one image to another image."
  arguments:
    - name: "old-image"
      type: "GimpImage"
    - name: "new-image"
      type: "GimpImage"
  example_call: "gimp-displays-reconnect(old-image, new-image)"

gimp-drawable-get-width:
  blurb: "Returns the width of the drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-get-width(drawable)"

gimp-image-select-rectangle:
  blurb: "Create a rectangular selection over the specified image;"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
  example_call: "gimp-image-select-rectangle(image, operation, x, y, width, height)"

script-fu-unsharp-mask:
  blurb: "Make a new image from the current layer by applying the unsharp mask method"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
  example_call: "script-fu-unsharp-mask(run-mode, image, drawables, adjustment, adjustment-2)"

file-raw-placeholder-nikon-load:
  blurb: "Load files in the Nikon raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-nikon-load(run-mode, file)"

file-fli-load:
  blurb: "Load FLI-movies"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "from-frame"
      type: "gint"
    - name: "to-frame"
      type: "gint"
  example_call: "file-fli-load(run-mode, file, from-frame, to-frame)"

gimp-gradient-segment-range-blend-colors:
  blurb: "Blend the colors of the segment range."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-blend-colors(gradient, start-segment, end-segment)"

gimp-image-select-polygon:
  blurb: "Create a polygonal selection over the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "segs"
      type: "GimpDoubleArray"
  example_call: "gimp-image-select-polygon(image, operation, segs)"

gimp-brush-set-aspect-ratio:
  blurb: "Sets the aspect ratio of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "aspect-ratio-in"
      type: "gdouble"
  example_call: "gimp-brush-set-aspect-ratio(brush, aspect-ratio-in)"

gimp-selection-sharpen:
  blurb: "Sharpen the selection mask."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-sharpen(image)"

gimp-text-layer-set-kerning:
  blurb: "Enable/disable kerning in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "kerning"
      type: "gboolean"
  example_call: "gimp-text-layer-set-kerning(layer, kerning)"

gimp-drawables-popup:
  blurb: "Invokes the drawable selection dialog."
  arguments:
    - name: "callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "drawable-type"
      type: "gchararray"
    - name: "initial-drawable"
      type: "GimpDrawable"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-drawables-popup(callback, popup-title, drawable-type, initial-drawable, parent-window)"

gimp-message-set-handler:
  blurb: "Controls where warning messages are displayed."
  arguments:
    - name: "handler"
      type: "GimpMessageHandlerType"
  example_call: "gimp-message-set-handler(handler)"

script-fu-guides-remove:
  blurb: "Remove all horizontal and vertical guides"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "script-fu-guides-remove(run-mode, image, drawables)"

gimp-context-get-brush-hardness:
  blurb: "Get brush hardness in paint options."
  arguments:
  example_call: "gimp-context-get-brush-hardness()"

gimp-progress-end:
  blurb: "Ends the progress bar for the current plug-in."
  arguments:
  example_call: "gimp-progress-end()"

gimp-text-layer-get-font:
  blurb: "Get the font from a text layer as string."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-font(layer)"

gimp-image-add-vguide:
  blurb: "Add a vertical guide to an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "xposition"
      type: "gint"
  example_call: "gimp-image-add-vguide(image, xposition)"

gimp-text-layer-set-language:
  blurb: "Set the language of the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "language"
      type: "gchararray"
  example_call: "gimp-text-layer-set-language(layer, language)"

gimp-path-stroke-get-length:
  blurb: "Measure the length of the given stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "precision"
      type: "gdouble"
  example_call: "gimp-path-stroke-get-length(path, stroke-id, precision)"

gimp-palette-get-entry-name:
  blurb: "Gets the name of an entry in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-num"
      type: "gint"
  example_call: "gimp-palette-get-entry-name(palette, entry-num)"

file-desktop-link-load:
  blurb: "Follows a link to an image in a .desktop file"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-desktop-link-load(run-mode, file)"

gimp-image-thaw-layers:
  blurb: "Thaw the image's layer list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-thaw-layers(image)"

file-icns-load:
  blurb: "Loads files in Apple Icon Image format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-icns-load(run-mode, file)"

file-bz2-export:
  blurb: "saves files compressed with bzip2"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-bz2-export(run-mode, image, file, options)"

gimp-dynamics-refresh:
  blurb: "Refresh current paint dynamics. This function always succeeds."
  arguments:
  example_call: "gimp-dynamics-refresh()"

script-fu-make-brush-elliptical-feathered:
  blurb: "Create an elliptical brush with feathered edges"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "adjustment-4"
      type: "gdouble"
  example_call: "script-fu-make-brush-elliptical-feathered(run-mode, string, adjustment, adjustment-2, adjustment-3, adjustment-4)"

gimp-image-convert-indexed:
  blurb: "Convert specified image to and Indexed image"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "dither-type"
      type: "GimpConvertDitherType"
    - name: "palette-type"
      type: "GimpConvertPaletteType"
    - name: "num-cols"
      type: "gint"
    - name: "alpha-dither"
      type: "gboolean"
    - name: "remove-unused"
      type: "gboolean"
    - name: "palette"
      type: "gchararray"
  example_call: "gimp-image-convert-indexed(image, dither-type, palette-type, num-cols, alpha-dither, remove-unused, palette)"

gimp-context-set-brush-default-spacing:
  blurb: "Set brush spacing to its default."
  arguments:
  example_call: "gimp-context-set-brush-default-spacing()"

file-rgbe-load:
  blurb: "Load files in the RGBE file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-rgbe-load(run-mode, file)"

gimp-palette-export-java:
  blurb: "Export the active palette as a java.util.Hashtable&lt;String,Color&gt;"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "dirname"
      type: "GFile"
    - name: "string"
      type: "gchararray"
  example_call: "gimp-palette-export-java(run-mode, dirname, string)"

plug-in-grid:
  blurb: "Draw a grid on the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "hwidth"
      type: "gint"
    - name: "hspace"
      type: "gint"
    - name: "hoffset"
      type: "gint"
    - name: "hcolor"
      type: "GeglColor"
    - name: "vwidth"
      type: "gint"
    - name: "vspace"
      type: "gint"
    - name: "voffset"
      type: "gint"
    - name: "vcolor"
      type: "GeglColor"
    - name: "iwidth"
      type: "gint"
    - name: "ispace"
      type: "gint"
    - name: "ioffset"
      type: "gint"
    - name: "icolor"
      type: "GeglColor"
  example_call: "plug-in-grid(run-mode, image, drawables, hwidth, hspace, hoffset, hcolor, vwidth, vspace, voffset, vcolor, iwidth, ispace, ioffset, icolor)"

gimp-drawable-shadows-highlights:
  blurb: "Perform shadows and highlights correction."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "shadows"
      type: "gdouble"
    - name: "highlights"
      type: "gdouble"
    - name: "whitepoint"
      type: "gdouble"
    - name: "radius"
      type: "gdouble"
    - name: "compress"
      type: "gdouble"
    - name: "shadows-ccorrect"
      type: "gdouble"
    - name: "highlights-ccorrect"
      type: "gdouble"
  example_call: "gimp-drawable-shadows-highlights(drawable, shadows, highlights, whitepoint, radius, compress, shadows-ccorrect, highlights-ccorrect)"

gimp-text-layer-set-hint-style:
  blurb: "Control how font outlines are hinted in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "style"
      type: "GimpTextHintStyle"
  example_call: "gimp-text-layer-set-hint-style(layer, style)"

gimp-image-freeze-layers:
  blurb: "Freeze the image's layer list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-freeze-layers(image)"

script-fu-lava:
  blurb: "Fill the current selection with lava"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "gradient"
      type: "GimpGradient"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
    - name: "toggle-3"
      type: "gboolean"
  example_call: "script-fu-lava(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, gradient, toggle, toggle-2, toggle-3)"

gimp-heal-default:
  blurb: "Heal from the source to the dest drawable using the current brush"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-heal-default(drawable, strokes)"

gimp-image-autocrop:
  blurb: "Remove empty borders from the image"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-image-autocrop(image, drawable)"

gimp-image-get-guide-position:
  blurb: "Get position of a guide on an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "guide"
      type: "guint"
  example_call: "gimp-image-get-guide-position(image, guide)"

gimp-drawable-filter-get-name:
  blurb: "Get a drawable filter's name."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-get-name(filter)"

gimp-text-layer-get-language:
  blurb: "Get the language used in the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-language(layer)"

gimp-detach-parasite:
  blurb: "Removes a global parasite."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-detach-parasite(name)"

gimp-path-bezier-stroke-new-moveto:
  blurb: "Adds a bezier stroke with a single moveto to the path object."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
  example_call: "gimp-path-bezier-stroke-new-moveto(path, x0, y0)"

plug-in-animationoptimize-diff:
  blurb: "Reduce file size where combining layers is possible"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-animationoptimize-diff(run-mode, image, drawables)"

plug-in-tile:
  blurb: "Create an array of copies of the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
    - name: "new-image"
      type: "gboolean"
  example_call: "plug-in-tile(run-mode, image, drawables, new-width, new-height, new-image)"

gimp-selection-all:
  blurb: "Select all of the image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-all(image)"

gimp-fonts-close-popup:
  blurb: "Close the font selection dialog."
  arguments:
    - name: "font-callback"
      type: "gchararray"
  example_call: "gimp-fonts-close-popup(font-callback)"

gimp-resource-id-is-pattern:
  blurb: "Returns whether the resource ID is a pattern."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-pattern(resource-id)"

gimp-layer-set-lock-alpha:
  blurb: "Set the lock alpha channel setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "lock-alpha"
      type: "gboolean"
  example_call: "gimp-layer-set-lock-alpha(layer, lock-alpha)"

gimp-layer-from-mask:
  blurb: "Get the specified mask's layer."
  arguments:
    - name: "mask"
      type: "GimpLayerMask"
  example_call: "gimp-layer-from-mask(mask)"

gimp-image-find-next-guide:
  blurb: "Find next guide on an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "guide"
      type: "gint"
  example_call: "gimp-image-find-next-guide(image, guide)"

plug-in-goat-exercise-c:
  blurb: "Plug-in example in C"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-goat-exercise-c(run-mode, image, drawables)"

gimp-image-set-selected-paths:
  blurb: "Sets the specified image's selected paths."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "paths"
      type: "GimpCoreObjectArray"
  example_call: "gimp-image-set-selected-paths(image, paths)"

gimp-image-autocrop-selected-layers:
  blurb: "Crop the selected layers based on empty borders of the input drawable"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-image-autocrop-selected-layers(image, drawable)"

gimp-item-detach-parasite:
  blurb: "Removes a parasite from an item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-item-detach-parasite(item, name)"

gimp-brushes-set-popup:
  blurb: "Sets the selected brush in a brush selection dialog."
  arguments:
    - name: "brush-callback"
      type: "gchararray"
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brushes-set-popup(brush-callback, brush)"

script-fu-ripply-anim:
  blurb: "Create a multi-layer image by adding a ripple effect to the current layer"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
    - name: "adjustment-2"
      type: "gint"
    - name: "option"
      type: "gint"
  example_call: "script-fu-ripply-anim(run-mode, image, drawables, adjustment, adjustment-2, option)"

file-raw-placeholder-panasonic-load:
  blurb: "Load files in the Panasonic raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-panasonic-load(run-mode, file)"

gimp-brushes-get-list:
  blurb: "Retrieve a complete listing of the available brushes."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-brushes-get-list(filter)"

gimp-context-set-brush-aspect-ratio:
  blurb: "Set brush aspect ratio."
  arguments:
    - name: "aspect"
      type: "gdouble"
  example_call: "gimp-context-set-brush-aspect-ratio(aspect)"

gimp-resource-duplicate:
  blurb: "Duplicates a resource."
  arguments:
    - name: "resource"
      type: "GimpResource"
  example_call: "gimp-resource-duplicate(resource)"

gimp-palette-set-entry-color:
  blurb: "Sets the color of an entry in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-num"
      type: "gint"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-palette-set-entry-color(palette, entry-num, color)"

file-psp-load:
  blurb: "Loads images from the Paint Shop Pro PSP file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-psp-load(run-mode, file)"

gimp-context-get-line-cap-style:
  blurb: "Get the line cap style setting."
  arguments:
  example_call: "gimp-context-get-line-cap-style()"

gimp-edit-named-paste-as-new-image:
  blurb: "Paste named buffer to a new image."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-edit-named-paste-as-new-image(buffer-name)"

file-psd-load-merged:
  blurb: "Loads images from the Photoshop PSD and PSB file formats"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-psd-load-merged(run-mode, file)"

gimp-image-grid-get-foreground-color:
  blurb: "Sets the foreground color of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-grid-get-foreground-color(image)"

gimp-dynamics-get-name-list:
  blurb: "Retrieve the list of loaded paint dynamics."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-dynamics-get-name-list(filter)"

plug-in-palettemap:
  blurb: "Recolor the image using colors from the active palette"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-palettemap(run-mode, image, drawables)"

gimp-context-set-brush-default-hardness:
  blurb: "Set brush spacing to its default."
  arguments:
  example_call: "gimp-context-set-brush-default-hardness()"

file-gih-export-internal:
  blurb: "Exports Gimp animated brush file (.gih)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "file"
      type: "GFile"
    - name: "spacing"
      type: "gint"
    - name: "name"
      type: "gchararray"
    - name: "params"
      type: "gchararray"
  example_call: "file-gih-export-internal(run-mode, image, drawables, file, spacing, name, params)"

gimp-channel-copy:
  blurb: "Copy a channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
  example_call: "gimp-channel-copy(channel)"

gimp-path-stroke-flip:
  blurb: "flips the given stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "flip-type"
      type: "GimpOrientationType"
    - name: "axis"
      type: "gdouble"
  example_call: "gimp-path-stroke-flip(path, stroke-id, flip-type, axis)"

file-raw-placeholder-sinar-load:
  blurb: "Load files in the Sinar raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-sinar-load(run-mode, file)"

gimp-item-get-parent:
  blurb: "Returns the item's parent item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-parent(item)"

gimp-context-set-paint-mode:
  blurb: "Set the paint mode."
  arguments:
    - name: "paint-mode"
      type: "GimpLayerMode"
  example_call: "gimp-context-set-paint-mode(paint-mode)"

file-print-gtk:
  blurb: "Print the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "file-print-gtk(run-mode, image, drawables)"

file-wbmp-load:
  blurb: "Loads files of Wireless BMP file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-wbmp-load(run-mode, file)"

gimp-floating-sel-attach:
  blurb: "Attach the specified layer as floating to the specified drawable."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-floating-sel-attach(layer, drawable)"

gimp-brush-get-angle:
  blurb: "Gets the rotation angle of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-angle(brush)"

gimp-image-insert-layer:
  blurb: "Add the specified layer to the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "layer"
      type: "GimpLayer"
    - name: "parent"
      type: "GimpLayer"
    - name: "position"
      type: "gint"
  example_call: "gimp-image-insert-layer(image, layer, parent, position)"

gimp-context-set-line-cap-style:
  blurb: "Set the line cap style setting."
  arguments:
    - name: "cap-style"
      type: "GimpCapStyle"
  example_call: "gimp-context-set-line-cap-style(cap-style)"

plug-in-compose:
  blurb: "Create an image using multiple gray images as color channels"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "image-2"
      type: "GimpImage"
    - name: "image-3"
      type: "GimpImage"
    - name: "image-4"
      type: "GimpImage"
    - name: "compose-type"
      type: "gchararray"
  example_call: "plug-in-compose(run-mode, image, drawables, image-2, image-3, image-4, compose-type)"

gimp-path-bezier-stroke-new-ellipse:
  blurb: "Adds a bezier stroke describing an ellipse the path object."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "radius-x"
      type: "gdouble"
    - name: "radius-y"
      type: "gdouble"
    - name: "angle"
      type: "gdouble"
  example_call: "gimp-path-bezier-stroke-new-ellipse(path, x0, y0, radius-x, radius-y, angle)"

gimp-text-layer-get-markup:
  blurb: "Get the markup from a text layer as string."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-markup(layer)"

gimp-edit-named-paste:
  blurb: "Paste named buffer to the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "buffer-name"
      type: "gchararray"
    - name: "paste-into"
      type: "gboolean"
  example_call: "gimp-edit-named-paste(drawable, buffer-name, paste-into)"

gimp-image-select-ellipse:
  blurb: "Create an elliptical selection over the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
  example_call: "gimp-image-select-ellipse(image, operation, x, y, width, height)"

gimp-buffer-delete:
  blurb: "Deletes a named buffer."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-buffer-delete(buffer-name)"

gimp-image-get-component-visible:
  blurb: "Returns if the specified image's image component is visible."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "component"
      type: "GimpChannelType"
  example_call: "gimp-image-get-component-visible(image, component)"

gimp-context-get-ink-tilt-sensitivity:
  blurb: "Get ink tilt sensitivity."
  arguments:
  example_call: "gimp-context-get-ink-tilt-sensitivity()"

gimp-path-stroke-scale:
  blurb: "scales the given stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "scale-x"
      type: "gdouble"
    - name: "scale-y"
      type: "gdouble"
  example_call: "gimp-path-stroke-scale(path, stroke-id, scale-x, scale-y)"

gimp-path-copy:
  blurb: "Copy a path object."
  arguments:
    - name: "path"
      type: "GimpPath"
  example_call: "gimp-path-copy(path)"

gimp-item-id-is-selection:
  blurb: "Returns whether the item ID is a selection."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-selection(item-id)"

gimp-context-set-foreground:
  blurb: "Set the current GIMP foreground color."
  arguments:
    - name: "foreground"
      type: "GeglColor"
  example_call: "gimp-context-set-foreground(foreground)"

script-fu-sota-chrome-it:
  blurb: "Add a chrome effect to the selected region (or alpha) using a specified (grayscale) stencil"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gdouble"
    - name: "filename"
      type: "GFile"
    - name: "color"
      type: "GeglColor"
    - name: "color-2"
      type: "GeglColor"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-sota-chrome-it(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, filename, color, color-2, toggle)"

gimp-quit:
  blurb: "Causes GIMP to exit gracefully."
  arguments:
    - name: "force"
      type: "gboolean"
  example_call: "gimp-quit(force)"

gimp-image-convert-grayscale:
  blurb: "Convert specified image to grayscale"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-convert-grayscale(image)"

gimp-dodgeburn:
  blurb: "Dodgeburn image with varying exposure."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "exposure"
      type: "gdouble"
    - name: "dodgeburn-type"
      type: "GimpDodgeBurnType"
    - name: "dodgeburn-mode"
      type: "GimpTransferMode"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-dodgeburn(drawable, exposure, dodgeburn-type, dodgeburn-mode, strokes)"

gimp-context-set-diagonal-neighbors:
  blurb: "Set the diagonal neighbors setting."
  arguments:
    - name: "diagonal-neighbors"
      type: "gboolean"
  example_call: "gimp-context-set-diagonal-neighbors(diagonal-neighbors)"

gimp-online-docs-web-site:
  blurb: "Bookmark to the GIMP web site"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-online-docs-web-site(run-mode)"

file-cur-load:
  blurb: "Loads files of Windows CUR file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-cur-load(run-mode, file)"

gimp-context-get-sample-threshold-int:
  blurb: "Get the sample threshold setting as an integer value."
  arguments:
  example_call: "gimp-context-get-sample-threshold-int()"

gimp-buffer-get-width:
  blurb: "Retrieves the specified buffer's width."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-buffer-get-width(buffer-name)"

gimp-channel-combine-masks:
  blurb: "Combine two channel masks."
  arguments:
    - name: "channel1"
      type: "GimpChannel"
    - name: "channel2"
      type: "GimpChannel"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-channel-combine-masks(channel1, channel2, operation, offx, offy)"

gimp-context-enable-dynamics:
  blurb: "Enables paint dynamics using the active paint dynamics."
  arguments:
    - name: "enable"
      type: "gboolean"
  example_call: "gimp-context-enable-dynamics(enable)"

gimp-layer-set-show-mask:
  blurb: "Set the show mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "show-mask"
      type: "gboolean"
  example_call: "gimp-layer-set-show-mask(layer, show-mask)"

gimp-context-are-dynamics-enabled:
  blurb: "Whether the currently active paint dynamics will be applied to painting."
  arguments:
  example_call: "gimp-context-are-dynamics-enabled()"

gimp-item-get-tattoo:
  blurb: "Get the tattoo of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-tattoo(item)"

gimp-file-load-thumbnail:
  blurb: "Loads the thumbnail for a file."
  arguments:
    - name: "file"
      type: "GFile"
  example_call: "gimp-file-load-thumbnail(file)"

gimp-text-font:
  blurb: "Add text at the specified location as a floating selection or a new layer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "drawable"
      type: "GimpDrawable"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
    - name: "text"
      type: "gchararray"
    - name: "border"
      type: "gint"
    - name: "antialias"
      type: "gboolean"
    - name: "size"
      type: "gdouble"
    - name: "font"
      type: "GimpFont"
  example_call: "gimp-text-font(image, drawable, x, y, text, border, antialias, size, font)"

gimp-layer-add-mask:
  blurb: "Add a layer mask to the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "mask"
      type: "GimpLayerMask"
  example_call: "gimp-layer-add-mask(layer, mask)"

gimp-image-get-resolution:
  blurb: "Returns the specified image's resolution."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-resolution(image)"

gimp-drawable-filter-get-operation-name:
  blurb: "Get a drawable filter's operation name."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-get-operation-name(filter)"

gimp-context-set-dynamics-name:
  blurb: "Set the active paint dynamics."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-context-set-dynamics-name(name)"

gimp-image-get-sample-point-position:
  blurb: "Get position of a sample point on an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "sample-point"
      type: "guint"
  example_call: "gimp-image-get-sample-point-position(image, sample-point)"

gimp-channel-set-show-masked:
  blurb: "Set the composite method of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
    - name: "show-masked"
      type: "gboolean"
  example_call: "gimp-channel-set-show-masked(channel, show-masked)"

plug-in-animationunoptimize:
  blurb: "Remove optimization to make editing easier"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-animationunoptimize(run-mode, image, drawables)"

gimp-context-get-feather:
  blurb: "Get the feather setting."
  arguments:
  example_call: "gimp-context-get-feather()"

gimp-context-get-line-width:
  blurb: "Get the line width setting."
  arguments:
  example_call: "gimp-context-get-line-width()"

plug-in-spheredesigner:
  blurb: "Create an image of a textured sphere"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-spheredesigner(run-mode, image, drawables)"

file-qoi-export:
  blurb: "Export image in the QOI file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-qoi-export(run-mode, image, file, options)"

gimp-selection-shrink:
  blurb: "Shrink the image's selection"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "steps"
      type: "gint"
  example_call: "gimp-selection-shrink(image, steps)"

gimp-text-layer-get-letter-spacing:
  blurb: "Get the letter spacing used in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-letter-spacing(layer)"

gimp-context-set-transform-resize:
  blurb: "Set the transform resize type."
  arguments:
    - name: "transform-resize"
      type: "GimpTransformResize"
  example_call: "gimp-context-set-transform-resize(transform-resize)"

gimp-help-using-web:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-web(run-mode)"

gimp-image-export-path-to-file:
  blurb: "save a path as an SVG file."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "path"
      type: "GimpPath"
  example_call: "gimp-image-export-path-to-file(image, file, path)"

gimp-palette-delete-entry:
  blurb: "Deletes an entry from the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-num"
      type: "gint"
  example_call: "gimp-palette-delete-entry(palette, entry-num)"

file-hgt-load:
  blurb: "Load HGT data as images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "sample-spacing"
      type: "gchararray"
    - name: "palette-offset"
      type: "gint"
    - name: "palette-type"
      type: "gchararray"
    - name: "palette-file"
      type: "GFile"
  example_call: "file-hgt-load(run-mode, file, sample-spacing, palette-offset, palette-type, palette-file)"

file-xbm-load:
  blurb: "Load a file in X10 or X11 bitmap (XBM) file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-xbm-load(run-mode, file)"

gimp-image-get-imported-file:
  blurb: "Returns the imported file for the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-imported-file(image)"

script-fu-blend-anim:
  blurb: "Create intermediate layers to blend two or more layers over a background as an animation"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-blend-anim(run-mode, image, drawables, adjustment, adjustment-2, toggle)"

file-dicom-export:
  blurb: "Save file in the DICOM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-dicom-export(run-mode, image, file, options)"

gimp-image-undo-is-enabled:
  blurb: "Check if the image's undo stack is enabled."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-is-enabled(image)"

gimp-progress-pulse:
  blurb: "Pulses the progress bar for the current plug-in."
  arguments:
  example_call: "gimp-progress-pulse()"

plug-in-despeckle:
  blurb: "Remove speckle noise from the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "radius"
      type: "gint"
    - name: "type"
      type: "gchararray"
    - name: "black"
      type: "gint"
    - name: "white"
      type: "gint"
  example_call: "plug-in-despeckle(run-mode, image, drawables, radius, type, black, white)"

gimp-resource-is-editable:
  blurb: "Whether the resource can be edited."
  arguments:
    - name: "resource"
      type: "GimpResource"
  example_call: "gimp-resource-is-editable(resource)"

gimp-context-get-line-dash-offset:
  blurb: "Get the line dash offset setting."
  arguments:
  example_call: "gimp-context-get-line-dash-offset()"

gimp-palettes-set-popup:
  blurb: "Sets the current palette in a palette selection dialog."
  arguments:
    - name: "palette-callback"
      type: "gchararray"
    - name: "palette"
      type: "GimpPalette"
  example_call: "gimp-palettes-set-popup(palette-callback, palette)"

gimp-path-stroke-flip-free:
  blurb: "flips the given stroke about an arbitrary axis."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
    - name: "x2"
      type: "gdouble"
    - name: "y2"
      type: "gdouble"
  example_call: "gimp-path-stroke-flip-free(path, stroke-id, x1, y1, x2, y2)"

file-jp2-load:
  blurb: "Loads JPEG 2000 images."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-jp2-load(run-mode, file)"

script-fu-coffee-stain:
  blurb: "Add layers of stain or blotch marks"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "gradient"
      type: "GimpGradient"
  example_call: "script-fu-coffee-stain(run-mode, image, drawables, adjustment, toggle, gradient)"

plug-in-depth-merge:
  blurb: "Combine two images using depth maps (z-buffers)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "source-1"
      type: "GimpDrawable"
    - name: "depth-map-1"
      type: "GimpDrawable"
    - name: "source-2"
      type: "GimpDrawable"
    - name: "depth-map-2"
      type: "GimpDrawable"
    - name: "overlap"
      type: "gdouble"
    - name: "offset"
      type: "gdouble"
    - name: "scale-1"
      type: "gdouble"
    - name: "scale-2"
      type: "gdouble"
  example_call: "plug-in-depth-merge(run-mode, image, drawables, source-1, depth-map-1, source-2, depth-map-2, overlap, offset, scale-1, scale-2)"

gimp-text-layer-get-base-direction:
  blurb: "Get the base direction used for rendering the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-base-direction(layer)"

gimp-resource-id-is-valid:
  blurb: "Returns TRUE if the resource ID is valid."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-valid(resource-id)"

gimp-image-grid-get-spacing:
  blurb: "Gets the spacing of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-grid-get-spacing(image)"

gimp-drawable-mask-intersect:
  blurb: "Find the bounding box of the current selection in relation to the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-mask-intersect(drawable)"

gimp-gradient-get-custom-samples:
  blurb: "Sample the gradient in custom positions."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "positions"
      type: "GimpDoubleArray"
    - name: "reverse"
      type: "gboolean"
  example_call: "gimp-gradient-get-custom-samples(gradient, positions, reverse)"

file-pbm-export:
  blurb: "Exports files in the PBM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "raw"
      type: "gchararray"
  example_call: "file-pbm-export(run-mode, image, file, options, raw)"

gimp-layer-set-offsets:
  blurb: "Set the layer offsets."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-layer-set-offsets(layer, offx, offy)"

gimp-edit-copy:
  blurb: "Copy from the specified drawables."
  arguments:
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "gimp-edit-copy(drawables)"

python-fu-histogram-export:
  blurb: "Exports the image histogram to a text file (CSV)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "file"
      type: "GFile"
    - name: "bucket-size"
      type: "gdouble"
    - name: "sample-average"
      type: "gboolean"
    - name: "output-format"
      type: "gchararray"
  example_call: "python-fu-histogram-export(run-mode, image, drawables, file, bucket-size, sample-average, output-format)"

gimp-selection-grow:
  blurb: "Grow the image's selection"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "steps"
      type: "gint"
  example_call: "gimp-selection-grow(image, steps)"

gimp-brush-set-angle:
  blurb: "Sets the rotation angle of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "angle-in"
      type: "gdouble"
  example_call: "gimp-brush-set-angle(brush, angle-in)"

gimp-selection-is-empty:
  blurb: "Determine whether the selection is empty."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-is-empty(image)"

file-psd-load-thumb:
  blurb: "Loads thumbnails from the Photoshop PSD file format"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-psd-load-thumb(file, thumb-size)"

gimp-context-set-brush-spacing:
  blurb: "Set brush spacing as percent of size."
  arguments:
    - name: "spacing"
      type: "gdouble"
  example_call: "gimp-context-set-brush-spacing(spacing)"

gimp-path-stroke-new-from-points:
  blurb: "Adds a stroke of a given type to the path object."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "type"
      type: "GimpPathStrokeType"
    - name: "controlpoints"
      type: "GimpDoubleArray"
    - name: "closed"
      type: "gboolean"
  example_call: "gimp-path-stroke-new-from-points(path, type, controlpoints, closed)"

gimp-gradients-refresh:
  blurb: "Refresh current gradients. This function always succeeds."
  arguments:
  example_call: "gimp-gradients-refresh()"

gimp-image-grid-set-spacing:
  blurb: "Sets the spacing of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "xspacing"
      type: "gdouble"
    - name: "yspacing"
      type: "gdouble"
  example_call: "gimp-image-grid-set-spacing(image, xspacing, yspacing)"

gimp-image-thaw-channels:
  blurb: "Thaw the image's channel list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-thaw-channels(image)"

gimp-drawable-get-offsets:
  blurb: "Returns the offsets for the drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-get-offsets(drawable)"

plug-in-plug-in-details:
  blurb: "Display information about plug-ins"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "plug-in-plug-in-details(run-mode)"

gimp-drawable-filter-delete:
  blurb: "Delete a drawable filter."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-delete(filter)"

file-xbm-export:
  blurb: "Export a file in X10 or X11 bitmap (XBM) file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "include-comment"
      type: "gboolean"
    - name: "gimp-comment"
      type: "gchararray"
    - name: "x10-format"
      type: "gboolean"
    - name: "use-hot-spot"
      type: "gboolean"
    - name: "hot-spot-x"
      type: "gint"
    - name: "hot-spot-y"
      type: "gint"
    - name: "prefix"
      type: "gchararray"
    - name: "write-mask"
      type: "gboolean"
    - name: "mask-suffix"
      type: "gchararray"
  example_call: "file-xbm-export(run-mode, image, file, options, include-comment, gimp-comment, x10-format, use-hot-spot, hot-spot-x, hot-spot-y, prefix, write-mask, mask-suffix)"

file-bmp-export:
  blurb: "Saves files in Windows BMP file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "use-rle"
      type: "gboolean"
    - name: "write-color-space"
      type: "gboolean"
    - name: "rgb-format"
      type: "gchararray"
  example_call: "file-bmp-export(run-mode, image, file, options, use-rle, write-color-space, rgb-format)"

file-wmf-load:
  blurb: "Loads files in the WMF file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "prefer-native-dimensions"
      type: "gboolean"
  example_call: "file-wmf-load(run-mode, file, width, height, keep-ratio, prefer-native-dimensions)"

gimp-text-get-extents-font:
  blurb: "Get extents of the bounding box for the specified text."
  arguments:
    - name: "text"
      type: "gchararray"
    - name: "size"
      type: "gdouble"
    - name: "font"
      type: "GimpFont"
  example_call: "gimp-text-get-extents-font(text, size, font)"

gimp-layer-get-show-mask:
  blurb: "Get the show mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-show-mask(layer)"

gimp-path-bezier-stroke-lineto:
  blurb: "Extends a bezier stroke with a lineto."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
  example_call: "gimp-path-bezier-stroke-lineto(path, stroke-id, x0, y0)"

gimp-help-using-simpleobjects:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-simpleobjects(run-mode)"

gimp-drawable-get-pixel:
  blurb: "Gets the value of the pixel at the specified coordinates."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "x-coord"
      type: "gint"
    - name: "y-coord"
      type: "gint"
  example_call: "gimp-drawable-get-pixel(drawable, x-coord, y-coord)"

gimp-path-stroke-interpolate:
  blurb: "returns polygonal approximation of the stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "precision"
      type: "gdouble"
  example_call: "gimp-path-stroke-interpolate(path, stroke-id, precision)"

file-openraster-export:
  blurb: "save an OpenRaster (.ora) file"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-openraster-export(run-mode, image, file, options)"

file-pat-export-internal:
  blurb: "Exports Gimp pattern file (.PAT)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "file"
      type: "GFile"
    - name: "name"
      type: "gchararray"
  example_call: "file-pat-export-internal(run-mode, image, drawables, file, name)"

gimp-text-layer-set-font:
  blurb: "Set the font of a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "font"
      type: "GimpFont"
  example_call: "gimp-text-layer-set-font(layer, font)"

plug-in-fractalexplorer:
  blurb: "Render fractal art"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "fractal-type"
      type: "gchararray"
    - name: "xmin"
      type: "gdouble"
    - name: "xmax"
      type: "gdouble"
    - name: "ymin"
      type: "gdouble"
    - name: "ymax"
      type: "gdouble"
    - name: "iter"
      type: "gdouble"
    - name: "cx"
      type: "gdouble"
    - name: "cy"
      type: "gdouble"
    - name: "color-mode"
      type: "gchararray"
    - name: "red-stretch"
      type: "gdouble"
    - name: "green-stretch"
      type: "gdouble"
    - name: "blue-stretch"
      type: "gdouble"
    - name: "red-mode"
      type: "gchararray"
    - name: "green-mode"
      type: "gchararray"
    - name: "blue-mode"
      type: "gchararray"
    - name: "red-invert"
      type: "gboolean"
    - name: "green-invert"
      type: "gboolean"
    - name: "blue-invert"
      type: "gboolean"
    - name: "n-colors"
      type: "gint"
    - name: "use-loglog-smoothing"
      type: "gboolean"
  example_call: "plug-in-fractalexplorer(run-mode, image, drawables, fractal-type, xmin, xmax, ymin, ymax, iter, cx, cy, color-mode, red-stretch, green-stretch, blue-stretch, red-mode, green-mode, blue-mode, red-invert, green-invert, blue-invert, n-colors, use-loglog-smoothing)"

file-gif-export:
  blurb: "exports files in GIF file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "interlace"
      type: "gboolean"
    - name: "loop"
      type: "gboolean"
    - name: "number-of-repeats"
      type: "gint"
    - name: "default-delay"
      type: "gint"
    - name: "default-dispose"
      type: "gchararray"
    - name: "as-animation"
      type: "gboolean"
    - name: "force-delay"
      type: "gboolean"
    - name: "force-dispose"
      type: "gboolean"
  example_call: "file-gif-export(run-mode, image, file, options, interlace, loop, number-of-repeats, default-delay, default-dispose, as-animation, force-delay, force-dispose)"

gimp-layer-resize:
  blurb: "Resize the layer to the specified extents."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-layer-resize(layer, new-width, new-height, offx, offy)"

gimp-fonts-set-popup:
  blurb: "Sets the current font in a font selection dialog."
  arguments:
    - name: "font-callback"
      type: "gchararray"
    - name: "font"
      type: "GimpFont"
  example_call: "gimp-fonts-set-popup(font-callback, font)"

gimp-brush-is-generated:
  blurb: "Whether the brush is generated (parametric versus raster)."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-is-generated(brush)"

gimp-fonts-popup:
  blurb: "Invokes the Gimp font selection dialog."
  arguments:
    - name: "font-callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "initial-font"
      type: "GimpFont"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-fonts-popup(font-callback, popup-title, initial-font, parent-window)"

file-eps-load:
  blurb: "Load Encapsulated PostScript images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "keep-ratio"
      type: "gboolean"
    - name: "prefer-native-dimensions"
      type: "gboolean"
    - name: "check-bbox"
      type: "gboolean"
    - name: "pages"
      type: "gchararray"
    - name: "coloring"
      type: "gchararray"
    - name: "text-alpha-bits"
      type: "gchararray"
    - name: "graphic-alpha-bits"
      type: "gchararray"
  example_call: "file-eps-load(run-mode, file, width, height, keep-ratio, prefer-native-dimensions, check-bbox, pages, coloring, text-alpha-bits, graphic-alpha-bits)"

gimp-item-transform-flip:
  blurb: "Flip the specified item around a given line."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
  example_call: "gimp-item-transform-flip(item, x0, y0, x1, y1)"

gimp-drawable-foreground-extract:
  blurb: "Extract the foreground of a drawable using a given trimap."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "mode"
      type: "GimpForegroundExtractMode"
    - name: "mask"
      type: "GimpDrawable"
  example_call: "gimp-drawable-foreground-extract(drawable, mode, mask)"

file-qoi-load:
  blurb: "Load file in the QOI file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-qoi-load(run-mode, file)"

gimp-item-id-is-channel:
  blurb: "Returns whether the item ID is a channel."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-channel(item-id)"

gimp-item-id-is-path:
  blurb: "Returns whether the item ID is a path."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-path(item-id)"

gimp-context-set-line-dash-pattern:
  blurb: "Set the line dash pattern setting."
  arguments:
    - name: "dashes"
      type: "GimpDoubleArray"
  example_call: "gimp-context-set-line-dash-pattern(dashes)"

script-fu-make-brush-rectangular:
  blurb: "Create a rectangular brush"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gdouble"
  example_call: "script-fu-make-brush-rectangular(run-mode, string, adjustment, adjustment-2, adjustment-3)"

gimp-progress-set-text:
  blurb: "Changes the text in the progress bar for the current plug-in."
  arguments:
    - name: "message"
      type: "gchararray"
  example_call: "gimp-progress-set-text(message)"

file-jpegxl-load:
  blurb: "Loads files in the JPEG XL file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-jpegxl-load(run-mode, file)"

gimp-layer-set-edit-mask:
  blurb: "Set the edit mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "edit-mask"
      type: "gboolean"
  example_call: "gimp-layer-set-edit-mask(layer, edit-mask)"

file-heif-export:
  blurb: "Exports HEIF images"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "quality"
      type: "gint"
    - name: "lossless"
      type: "gboolean"
    - name: "save-bit-depth"
      type: "gint"
    - name: "pixel-format"
      type: "gchararray"
    - name: "encoder-speed"
      type: "gchararray"
    - name: "include-exif"
      type: "gboolean"
    - name: "include-xmp"
      type: "gboolean"
  example_call: "file-heif-export(run-mode, image, file, options, quality, lossless, save-bit-depth, pixel-format, encoder-speed, include-exif, include-xmp)"

gimp-channel-new:
  blurb: "Create a new channel."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "opacity"
      type: "gdouble"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-channel-new(image, name, width, height, opacity, color)"

gimp-image-export-path-to-string:
  blurb: "Save a path as an SVG string."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "path"
      type: "GimpPath"
  example_call: "gimp-image-export-path-to-string(image, path)"

gimp-help-using-fileformats:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-fileformats(run-mode)"

gimp-image-get-layers:
  blurb: "Returns the list of root layers contained in the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-layers(image)"

gimp-path-stroke-translate:
  blurb: "translate the given stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "off-x"
      type: "gdouble"
    - name: "off-y"
      type: "gdouble"
  example_call: "gimp-path-stroke-translate(path, stroke-id, off-x, off-y)"

gimp-item-id-is-layer:
  blurb: "Returns whether the item ID is a layer."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-layer(item-id)"

gimp-text-layer-get-indent:
  blurb: "Get the line indentation of text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-indent(layer)"

gimp-text-layer-new:
  blurb: "Creates a new text layer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "text"
      type: "gchararray"
    - name: "font"
      type: "GimpFont"
    - name: "size"
      type: "gdouble"
    - name: "unit"
      type: "GimpUnit"
  example_call: "gimp-text-layer-new(image, text, font, size, unit)"

gimp-drawable-mask-bounds:
  blurb: "Find the bounding box of the current selection in relation to the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-mask-bounds(drawable)"

gimp-context-get-brush-force:
  blurb: "Get brush force in paint options."
  arguments:
  example_call: "gimp-context-get-brush-force()"

extension-gimp-help:
  blurb: "None"
  arguments:
    - name: "domain-names"
      type: "GStrv"
    - name: "domain-uris"
      type: "GStrv"
  example_call: "extension-gimp-help(domain-names, domain-uris)"

gimp-get-module-load-inhibit:
  blurb: "Get the list of modules which should not be loaded."
  arguments:
  example_call: "gimp-get-module-load-inhibit()"

gimp-file-load:
  blurb: "Loads an image file by invoking the right load handler."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "gimp-file-load(run-mode, file)"

gimp-image-set-color-profile-from-file:
  blurb: "Sets the image's color profile from an ICC file"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-image-set-color-profile-from-file(image, file)"

gimp-pencil:
  blurb: "Paint in the current brush without sub-pixel sampling."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-pencil(drawable, strokes)"

gimp-text-layer-get-hint-style:
  blurb: "Get information about hinting in the specified text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-hint-style(layer)"

gimp-image-policy-color-profile:
  blurb: "Execute the color profile conversion policy."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "interactive"
      type: "gboolean"
  example_call: "gimp-image-policy-color-profile(image, interactive)"

gimp-drawable-edit-stroke-selection:
  blurb: "Stroke the current selection"
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-edit-stroke-selection(drawable)"

gimp-online-bugs-features:
  blurb: "Bookmark to the bug tracker of GIMP"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-online-bugs-features(run-mode)"

file-raw-placeholder-cine-load:
  blurb: "Load files in the CINE raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-cine-load(run-mode, file)"

file-header-export:
  blurb: "Saves files as C unsigned character array"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-header-export(run-mode, image, file, options)"

gimp-xcf-load:
  blurb: "Loads file saved in the .xcf file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "gimp-xcf-load(run-mode, file)"

file-faxg3-load:
  blurb: "Loads g3 fax files"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-faxg3-load(run-mode, file)"

gimp-image-delete:
  blurb: "Delete the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-delete(image)"

file-raw-placeholder-mos-load:
  blurb: "Load files in the MOS raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-mos-load(run-mode, file)"

gimp-image-detach-parasite:
  blurb: "Removes a parasite from an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-image-detach-parasite(image, name)"

gimp-layer-get-lock-alpha:
  blurb: "Get the lock alpha channel setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-lock-alpha(layer)"

gimp-image-insert-channel:
  blurb: "Add the specified channel to the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "channel"
      type: "GimpChannel"
    - name: "parent"
      type: "GimpChannel"
    - name: "position"
      type: "gint"
  example_call: "gimp-image-insert-channel(image, channel, parent, position)"

gimp-item-set-lock-visibility:
  blurb: "Set the 'lock visibility' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "lock-visibility"
      type: "gboolean"
  example_call: "gimp-item-set-lock-visibility(item, lock-visibility)"

gimp-image-get-layer-by-tattoo:
  blurb: "Find a layer with a given tattoo in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "tattoo"
      type: "guint"
  example_call: "gimp-image-get-layer-by-tattoo(image, tattoo)"

gimp-brushes-popup:
  blurb: "Invokes the GIMP brush selection dialog."
  arguments:
    - name: "brush-callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "initial-brush"
      type: "GimpBrush"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-brushes-popup(brush-callback, popup-title, initial-brush, parent-window)"

file-pnm-export:
  blurb: "Exports files in the PNM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "raw"
      type: "gchararray"
  example_call: "file-pnm-export(run-mode, image, file, options, raw)"

plug-in-decompose:
  blurb: "Decompose an image into separate colorspace components"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "decompose-type"
      type: "gchararray"
    - name: "layers-mode"
      type: "gboolean"
    - name: "use-registration"
      type: "gboolean"
  example_call: "plug-in-decompose(run-mode, image, drawables, decompose-type, layers-mode, use-registration)"

file-raw-placeholder-srw-load:
  blurb: "Load files in the SRW raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-srw-load(run-mode, file)"

gimp-progress-get-window-handle:
  blurb: "Returns the native handle of the toplevel window this plug-in's progress is or would be displayed in."
  arguments:
  example_call: "gimp-progress-get-window-handle()"

gimp-image-duplicate:
  blurb: "Duplicate the specified image"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-duplicate(image)"

script-fu-drop-shadow:
  blurb: "Add a drop shadow to the selected region (or alpha)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "color"
      type: "GeglColor"
    - name: "adjustment-4"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-drop-shadow(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, color, adjustment-4, toggle)"

gimp-item-get-parasite:
  blurb: "Look up a parasite in an item"
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-item-get-parasite(item, name)"

gimp-image-get-paths:
  blurb: "Returns the list of paths contained in the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-paths(image)"

gimp-image-get-component-active:
  blurb: "Returns if the specified image's image component is active."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "component"
      type: "GimpChannelType"
  example_call: "gimp-image-get-component-active(image, component)"

file-exr-load:
  blurb: "Loads files in the OpenEXR file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-exr-load(run-mode, file)"

file-cel-export:
  blurb: "Exports files in KISS CEL file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "palette-file"
      type: "GFile"
  example_call: "file-cel-export(run-mode, image, file, options, palette-file)"

plug-in-web-browser:
  blurb: "Open an URL in the user specified web browser"
  arguments:
    - name: "url"
      type: "gchararray"
  example_call: "plug-in-web-browser(url)"

gimp-item-transform-2d:
  blurb: "Transform the specified item in 2d."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "source-x"
      type: "gdouble"
    - name: "source-y"
      type: "gdouble"
    - name: "scale-x"
      type: "gdouble"
    - name: "scale-y"
      type: "gdouble"
    - name: "angle"
      type: "gdouble"
    - name: "dest-x"
      type: "gdouble"
    - name: "dest-y"
      type: "gdouble"
  example_call: "gimp-item-transform-2d(item, source-x, source-y, scale-x, scale-y, angle, dest-x, dest-y)"

gimp-context-set-gradient-blend-color-space:
  blurb: "Set the gradient blend color space."
  arguments:
    - name: "blend-color-space"
      type: "GimpGradientBlendColorSpace"
  example_call: "gimp-context-set-gradient-blend-color-space(blend-color-space)"

gimp-text-layer-get-text:
  blurb: "Get the text from a text layer as string."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-text(layer)"

gimp-context-get-brush:
  blurb: "Get the currently active brush."
  arguments:
  example_call: "gimp-context-get-brush()"

gimp-drawable-levels-stretch:
  blurb: "Automatically modifies intensity levels in the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-levels-stretch(drawable)"

gimp-item-transform-matrix:
  blurb: "Transform the specified item in 2d."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "coeff-0-0"
      type: "gdouble"
    - name: "coeff-0-1"
      type: "gdouble"
    - name: "coeff-0-2"
      type: "gdouble"
    - name: "coeff-1-0"
      type: "gdouble"
    - name: "coeff-1-1"
      type: "gdouble"
    - name: "coeff-1-2"
      type: "gdouble"
    - name: "coeff-2-0"
      type: "gdouble"
    - name: "coeff-2-1"
      type: "gdouble"
    - name: "coeff-2-2"
      type: "gdouble"
  example_call: "gimp-item-transform-matrix(item, coeff-0-0, coeff-0-1, coeff-0-2, coeff-1-0, coeff-1-1, coeff-1-2, coeff-2-0, coeff-2-1, coeff-2-2)"

gimp-drawable-filter-get-blend-mode:
  blurb: "Get the blending mode of the specified filter."
  arguments:
    - name: "filter"
      type: "GimpDrawableFilter"
  example_call: "gimp-drawable-filter-get-blend-mode(filter)"

gimp-image-set-simulation-intent:
  blurb: "Sets the image's simulation rendering intent"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "intent"
      type: "GimpColorRenderingIntent"
  example_call: "gimp-image-set-simulation-intent(image, intent)"

gimp-drawable-set-pixel:
  blurb: "Sets the value of the pixel at the specified coordinates."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "x-coord"
      type: "gint"
    - name: "y-coord"
      type: "gint"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-drawable-set-pixel(drawable, x-coord, y-coord, color)"

gimp-resource-get-name:
  blurb: "Returns the resource's name."
  arguments:
    - name: "resource"
      type: "GimpResource"
  example_call: "gimp-resource-get-name(resource)"

gimp-text-layer-set-markup:
  blurb: "Set the markup for a text layer from a string."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "markup"
      type: "gchararray"
  example_call: "gimp-text-layer-set-markup(layer, markup)"

gimp-image-get-precision:
  blurb: "Get the precision of the image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-precision(image)"

file-sunras-load:
  blurb: "Load file of the SunRaster file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-sunras-load(run-mode, file)"

gimp-item-id-is-text-layer:
  blurb: "Returns whether the item ID is a text layer."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-text-layer(item-id)"

gimp-palette-export-php:
  blurb: "Export the active palette as a PHP dictionary (name => color)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "dirname"
      type: "GFile"
    - name: "string"
      type: "gchararray"
  example_call: "gimp-palette-export-php(run-mode, dirname, string)"

file-tga-export:
  blurb: "Exports files in the Targa file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "rle"
      type: "gboolean"
    - name: "origin"
      type: "gchararray"
  example_call: "file-tga-export(run-mode, image, file, options, rle, origin)"

gimp-context-get-ink-size-sensitivity:
  blurb: "Get ink size sensitivity."
  arguments:
  example_call: "gimp-context-get-ink-size-sensitivity()"

gimp-context-get-brush-angle:
  blurb: "Get brush angle in degrees."
  arguments:
  example_call: "gimp-context-get-brush-angle()"

gimp-image-add-hguide:
  blurb: "Add a horizontal guide to an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "yposition"
      type: "gint"
  example_call: "gimp-image-add-hguide(image, yposition)"

gimp-image-convert-rgb:
  blurb: "Convert specified image to RGB color"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-convert-rgb(image)"

gimp-context-get-paint-mode:
  blurb: "Get the paint mode."
  arguments:
  example_call: "gimp-context-get-paint-mode()"

file-cur-export:
  blurb: "Saves files in Windows CUR file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "hot-spot-x"
      type: "GimpInt32Array"
    - name: "hot-spot-y"
      type: "GimpInt32Array"
  example_call: "file-cur-export(run-mode, image, file, options, hot-spot-x, hot-spot-y)"

file-cel-load:
  blurb: "Loads files in KISS CEL file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "palette-file"
      type: "GFile"
  example_call: "file-cel-load(run-mode, file, palette-file)"

gimp-layer-get-edit-mask:
  blurb: "Get the edit mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-edit-mask(layer)"

gimp-image-get-guide-orientation:
  blurb: "Get orientation of a guide on an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "guide"
      type: "guint"
  example_call: "gimp-image-get-guide-orientation(image, guide)"

gimp-get-parasite:
  blurb: "Look up a global parasite."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-get-parasite(name)"

gimp-item-set-tattoo:
  blurb: "Set the tattoo of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "tattoo"
      type: "guint"
  example_call: "gimp-item-set-tattoo(item, tattoo)"

gimp-image-unset-active-channel:
  blurb: "Unsets the active channel in the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-unset-active-channel(image)"

gimp-image-raise-item-to-top:
  blurb: "Raise the specified item to the top of its level in its item tree"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-image-raise-item-to-top(image, item)"

gimp-smudge:
  blurb: "Smudge image with varying pressure."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "pressure"
      type: "gdouble"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-smudge(drawable, pressure, strokes)"

script-fu-gradient-example:
  blurb: "Create an image filled with an example of the current gradient"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-gradient-example(run-mode, adjustment, adjustment-2, toggle)"

file-ico-load:
  blurb: "Loads files of Windows ICO file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-ico-load(run-mode, file)"

gimp-image-set-simulation-profile-from-file:
  blurb: "Sets the image's simulation color profile from an ICC file"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-image-set-simulation-profile-from-file(image, file)"

file-openraster-load-thumb:
  blurb: "loads a thumbnail from an OpenRaster (.ora) file"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-openraster-load-thumb(file, thumb-size)"

gimp-image-undo-freeze:
  blurb: "Freeze the image's undo stack."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-freeze(image)"

script-fu-perspective-shadow:
  blurb: "Add a perspective shadow to the selected region (or alpha)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "adjustment-3"
      type: "gdouble"
    - name: "adjustment-4"
      type: "gint"
    - name: "color"
      type: "GeglColor"
    - name: "adjustment-5"
      type: "gint"
    - name: "enum"
      type: "GimpInterpolationType"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-perspective-shadow(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, adjustment-4, color, adjustment-5, enum, toggle)"

gimp-palette-new:
  blurb: "Creates a new palette"
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-palette-new(name)"

plug-in-script-fu-console:
  blurb: "Interactive console for Script-Fu development"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "plug-in-script-fu-console(run-mode)"

gimp-context-get-brush-aspect-ratio:
  blurb: "Get brush aspect ratio."
  arguments:
  example_call: "gimp-context-get-brush-aspect-ratio()"

gimp-drawable-filter-new:
  blurb: "Create a new drawable filter."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "operation-name"
      type: "gchararray"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-drawable-filter-new(drawable, operation-name, name)"

gimp-context-push:
  blurb: "Pushes a context onto the top of the plug-in's context stack."
  arguments:
  example_call: "gimp-context-push()"

gimp-layer-set-apply-mask:
  blurb: "Set the apply mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "apply-mask"
      type: "gboolean"
  example_call: "gimp-layer-set-apply-mask(layer, apply-mask)"

file-pdf-export-multi:
  blurb: "Save files in PDF format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "images"
      type: "GimpCoreObjectArray"
    - name: "vectorize"
      type: "gboolean"
    - name: "ignore-hidden"
      type: "gboolean"
    - name: "apply-masks"
      type: "gboolean"
    - name: "fill-background-color"
      type: "gboolean"
    - name: "uri"
      type: "gchararray"
  example_call: "file-pdf-export-multi(run-mode, images, vectorize, ignore-hidden, apply-masks, fill-background-color, uri)"

gimp-online-developer-web-site:
  blurb: "Bookmark to the GIMP web site"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-online-developer-web-site(run-mode)"

gimp-convolve-default:
  blurb: "Convolve (Blur, Sharpen) using the current brush."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-convolve-default(drawable, strokes)"

plug-in-metadata-viewer:
  blurb: "View metadata (Exif, IPTC, XMP)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-metadata-viewer(run-mode, image, drawables)"

plug-in-small-tiles:
  blurb: "Tile image into smaller versions of the original"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "num-tiles"
      type: "gint"
  example_call: "plug-in-small-tiles(run-mode, image, drawables, num-tiles)"

file-gih-load:
  blurb: "Loads GIMP animated brushes"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-gih-load(run-mode, file)"

plug-in-colormap-swap:
  blurb: "Swap two colors in the colormap"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "index1"
      type: "gint"
    - name: "index2"
      type: "gint"
  example_call: "plug-in-colormap-swap(run-mode, image, drawables, index1, index2)"

script-fu-distress-selection:
  blurb: "Distress the selection"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gdouble"
    - name: "adjustment-2"
      type: "gint"
    - name: "adjustment-3"
      type: "gint"
    - name: "adjustment-4"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
  example_call: "script-fu-distress-selection(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, adjustment-4, toggle, toggle-2)"

gimp-context-set-gradient:
  blurb: "Sets the active gradient."
  arguments:
    - name: "gradient"
      type: "GimpGradient"
  example_call: "gimp-context-set-gradient(gradient)"

gimp-drawable-invert:
  blurb: "Invert the contents of the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "linear"
      type: "gboolean"
  example_call: "gimp-drawable-invert(drawable, linear)"

gimp-image-get-file:
  blurb: "Returns the file for the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-file(image)"

gimp-display-get-window-handle:
  blurb: "Get a handle to the native window for an image display."
  arguments:
    - name: "display"
      type: "GimpDisplay"
  example_call: "gimp-display-get-window-handle(display)"

gimp-image-freeze-channels:
  blurb: "Freeze the image's channel list."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-freeze-channels(image)"

plug-in-align-layers:
  blurb: "Align all visible layers of the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "horizontal-style"
      type: "gchararray"
    - name: "horizontal-base"
      type: "gchararray"
    - name: "vertical-style"
      type: "gchararray"
    - name: "vertical-base"
      type: "gchararray"
    - name: "grid-size"
      type: "gint"
    - name: "ignore-bottom-layer"
      type: "gboolean"
    - name: "use-bottom-layer"
      type: "gboolean"
  example_call: "plug-in-align-layers(run-mode, image, drawables, horizontal-style, horizontal-base, vertical-style, vertical-base, grid-size, ignore-bottom-layer, use-bottom-layer)"

gimp-image-get-channel-by-tattoo:
  blurb: "Find a channel with a given tattoo in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "tattoo"
      type: "guint"
  example_call: "gimp-image-get-channel-by-tattoo(image, tattoo)"

gimp-context-get-ink-blob-aspect-ratio:
  blurb: "Get ink blob aspect ratio."
  arguments:
  example_call: "gimp-context-get-ink-blob-aspect-ratio()"

gimp-image-add-sample-point:
  blurb: "Add a sample point to an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "position-x"
      type: "gint"
    - name: "position-y"
      type: "gint"
  example_call: "gimp-image-add-sample-point(image, position-x, position-y)"

gimp-gradient-segment-range-set-blending-function:
  blurb: "Sets the blending function of a range of segments"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
    - name: "blending-function"
      type: "GimpGradientSegmentType"
  example_call: "gimp-gradient-segment-range-set-blending-function(gradient, start-segment, end-segment, blending-function)"

gimp-image-get-base-type:
  blurb: "Get the base type of the image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-base-type(image)"

script-fu-tile-blur:
  blurb: "Blur the edges of an image so the result tiles seamlessly"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
    - name: "option"
      type: "gint"
  example_call: "script-fu-tile-blur(run-mode, image, drawables, adjustment, toggle, toggle-2, option)"

gimp-drawable-extract-component:
  blurb: "Extract a color model component."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "component"
      type: "gint"
    - name: "invert"
      type: "gboolean"
    - name: "linear"
      type: "gboolean"
  example_call: "gimp-drawable-extract-component(drawable, component, invert, linear)"

gimp-brush-get-radius:
  blurb: "Gets the radius of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-radius(brush)"

gimp-drawable-threshold:
  blurb: "Threshold the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "channel"
      type: "GimpHistogramChannel"
    - name: "low-threshold"
      type: "gdouble"
    - name: "high-threshold"
      type: "gdouble"
  example_call: "gimp-drawable-threshold(drawable, channel, low-threshold, high-threshold)"

gimp-item-transform-translate:
  blurb: "Translate the item by the specified offsets."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "off-x"
      type: "gdouble"
    - name: "off-y"
      type: "gdouble"
  example_call: "gimp-item-transform-translate(item, off-x, off-y)"

gimp-image-get-unit:
  blurb: "Returns the specified image's unit."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-unit(image)"

file-sgi-export:
  blurb: "Exports files in SGI image file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "compression"
      type: "gchararray"
  example_call: "file-sgi-export(run-mode, image, file, options, compression)"

gimp-context-get-gradient:
  blurb: "Get the currently active gradient."
  arguments:
  example_call: "gimp-context-get-gradient()"

gimp-image-get-layer-by-name:
  blurb: "Find a layer with a given name in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-image-get-layer-by-name(image, name)"

file-raw-placeholder-sony-load:
  blurb: "Load files in the Sony raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-sony-load(run-mode, file)"

file-raw-placeholder-orf-load:
  blurb: "Load files in the ORF raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-orf-load(run-mode, file)"

gimp-context-get-background:
  blurb: "Get the current GIMP background color."
  arguments:
  example_call: "gimp-context-get-background()"

gimp-image-set-tattoo-state:
  blurb: "Set the tattoo state associated with the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "tattoo-state"
      type: "guint"
  example_call: "gimp-image-set-tattoo-state(image, tattoo-state)"

gimp-context-get-palette:
  blurb: "Get the currently active palette."
  arguments:
  example_call: "gimp-context-get-palette()"

file-xwd-export:
  blurb: "Exports files in the XWD (X Window Dump) format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-xwd-export(run-mode, image, file, options)"

gimp-context-get-diagonal-neighbors:
  blurb: "Get the diagonal neighbors setting."
  arguments:
  example_call: "gimp-context-get-diagonal-neighbors()"

gimp-context-set-feather-radius:
  blurb: "Set the feather radius setting."
  arguments:
    - name: "feather-radius-x"
      type: "gdouble"
    - name: "feather-radius-y"
      type: "gdouble"
  example_call: "gimp-context-set-feather-radius(feather-radius-x, feather-radius-y)"

plug-in-imagemap:
  blurb: "Create a clickable imagemap"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-imagemap(run-mode, image, drawables)"

gimp-display-delete:
  blurb: "Delete the specified display."
  arguments:
    - name: "display"
      type: "GimpDisplay"
  example_call: "gimp-display-delete(display)"

file-openraster-load:
  blurb: "load an OpenRaster (.ora) file"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-openraster-load(run-mode, file)"

file-xz-load:
  blurb: "loads files compressed with xz"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-xz-load(run-mode, file)"

gimp-help-using-docks:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-using-docks(run-mode)"

gimp-gradient-get-number-of-segments:
  blurb: "Gets the number of segments of the gradient"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
  example_call: "gimp-gradient-get-number-of-segments(gradient)"

gimp-pattern-get-by-name:
  blurb: "Returns the pattern with the given name."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-pattern-get-by-name(name)"

gimp-palette-get-color-count:
  blurb: "Get the count of colors in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
  example_call: "gimp-palette-get-color-count(palette)"

gimp-context-set-palette:
  blurb: "Set the active palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
  example_call: "gimp-context-set-palette(palette)"

gimp-image-insert-path:
  blurb: "Add the specified path to the image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "path"
      type: "GimpPath"
    - name: "parent"
      type: "GimpPath"
    - name: "position"
      type: "gint"
  example_call: "gimp-image-insert-path(image, path, parent, position)"

file-farbfeld-export:
  blurb: "Export image in the Farbfeld file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-farbfeld-export(run-mode, image, file, options)"

file-ps-load-thumb:
  blurb: "Loads a small preview from a PostScript or PDF document"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-ps-load-thumb(file, thumb-size)"

gimp-context-set-brush-hardness:
  blurb: "Set brush hardness."
  arguments:
    - name: "hardness"
      type: "gdouble"
  example_call: "gimp-context-set-brush-hardness(hardness)"

gimp-convolve:
  blurb: "Convolve (Blur, Sharpen) using the current brush."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "pressure"
      type: "gdouble"
    - name: "convolve-type"
      type: "GimpConvolveType"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-convolve(drawable, pressure, convolve-type, strokes)"

gimp-gradient-segment-set-middle-pos:
  blurb: "Sets the midpoint position of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
    - name: "pos"
      type: "gdouble"
  example_call: "gimp-gradient-segment-set-middle-pos(gradient, segment, pos)"

gimp-context-get-ink-speed-sensitivity:
  blurb: "Get ink speed sensitivity."
  arguments:
  example_call: "gimp-context-get-ink-speed-sensitivity()"

gimp-context-set-ink-blob-aspect-ratio:
  blurb: "Set ink blob aspect ratio."
  arguments:
    - name: "aspect"
      type: "gdouble"
  example_call: "gimp-context-set-ink-blob-aspect-ratio(aspect)"

gimp-image-delete-guide:
  blurb: "Deletes a guide from an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "guide"
      type: "guint"
  example_call: "gimp-image-delete-guide(image, guide)"

gimp-context-get-gradient-reverse:
  blurb: "Get the gradient reverse setting."
  arguments:
  example_call: "gimp-context-get-gradient-reverse()"

gimp-help-main:
  blurb: "Bookmark to the user manual"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-help-main(run-mode)"

gimp-context-get-brush-spacing:
  blurb: "Get brush spacing as percent of size."
  arguments:
  example_call: "gimp-context-get-brush-spacing()"

file-raw-placeholder-x3f-load:
  blurb: "Load files in the X3F raw format via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-x3f-load(run-mode, file)"

gimp-context-get-gradient-repeat-mode:
  blurb: "Get the gradient repeat mode."
  arguments:
  example_call: "gimp-context-get-gradient-repeat-mode()"

plug-in-sel2path:
  blurb: "Converts a selection to a path"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "align-threshold"
      type: "gdouble"
    - name: "corner-always-threshold"
      type: "gdouble"
    - name: "corner-surround"
      type: "gint"
    - name: "corner-threshold"
      type: "gdouble"
    - name: "error-threshold"
      type: "gdouble"
    - name: "filter-alternative-surround"
      type: "gint"
    - name: "filter-epsilon"
      type: "gdouble"
    - name: "filter-iteration-count"
      type: "gint"
    - name: "filter-percent"
      type: "gdouble"
    - name: "filter-secondary-surround"
      type: "gint"
    - name: "filter-surround"
      type: "gint"
    - name: "keep-knees"
      type: "gboolean"
    - name: "line-reversion-threshold"
      type: "gdouble"
    - name: "line-threshold"
      type: "gdouble"
    - name: "reparametrize-improvement"
      type: "gdouble"
    - name: "reparametrize-threshold"
      type: "gdouble"
    - name: "subdivide-search"
      type: "gdouble"
    - name: "subdivide-surround"
      type: "gint"
    - name: "subdivide-threshold"
      type: "gdouble"
    - name: "tangent-surround"
      type: "gint"
  example_call: "plug-in-sel2path(run-mode, image, drawables, align-threshold, corner-always-threshold, corner-surround, corner-threshold, error-threshold, filter-alternative-surround, filter-epsilon, filter-iteration-count, filter-percent, filter-secondary-surround, filter-surround, keep-knees, line-reversion-threshold, line-threshold, reparametrize-improvement, reparametrize-threshold, subdivide-search, subdivide-surround, subdivide-threshold, tangent-surround)"

gimp-image-grid-set-background-color:
  blurb: "Gets the background color of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "bgcolor"
      type: "GeglColor"
  example_call: "gimp-image-grid-set-background-color(image, bgcolor)"

gimp-drawable-get-filters:
  blurb: "Returns the list of filters applied to the drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-get-filters(drawable)"

plug-in-checkerboard:
  blurb: "Create a checkerboard pattern"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "psychobilly"
      type: "gboolean"
    - name: "check-size"
      type: "gint"
  example_call: "plug-in-checkerboard(run-mode, image, drawables, psychobilly, check-size)"

file-gz-export:
  blurb: "saves files compressed with gzip"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-gz-export(run-mode, image, file, options)"

gimp-gradient-segment-range-replicate:
  blurb: "Replicate the segment range"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
    - name: "replicate-times"
      type: "gint"
  example_call: "gimp-gradient-segment-range-replicate(gradient, start-segment, end-segment, replicate-times)"

gimp-drawable-update:
  blurb: "Update the specified region of the drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "x"
      type: "gint"
    - name: "y"
      type: "gint"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
  example_call: "gimp-drawable-update(drawable, x, y, width, height)"

gimp-group-layer-merge:
  blurb: "Merge the passed group layer's layers into one normal layer."
  arguments:
    - name: "group-layer"
      type: "GimpGroupLayer"
  example_call: "gimp-group-layer-merge(group-layer)"

file-pat-export:
  blurb: "Exports GIMP pattern file (.PAT)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "description"
      type: "gchararray"
  example_call: "file-pat-export(run-mode, image, file, options, description)"

gimp-file-load-layer:
  blurb: "Loads an image file as a layer for an existing image."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-file-load-layer(run-mode, image, file)"

gimp-selection-none:
  blurb: "Deselect the entire image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-selection-none(image)"

gimp-image-delete-sample-point:
  blurb: "Deletes a sample point from an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "sample-point"
      type: "guint"
  example_call: "gimp-image-delete-sample-point(image, sample-point)"

script-fu-line-nova:
  blurb: "Fill a layer with rays emanating outward from its center using the foreground color"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gdouble"
    - name: "adjustment-3"
      type: "gint"
    - name: "adjustment-4"
      type: "gint"
  example_call: "script-fu-line-nova(run-mode, image, drawables, adjustment, adjustment-2, adjustment-3, adjustment-4)"

gimp-drawable-desaturate:
  blurb: "Desaturate the contents of the specified drawable, with the specified formula."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "desaturate-mode"
      type: "GimpDesaturateMode"
  example_call: "gimp-drawable-desaturate(drawable, desaturate-mode)"

gimp-brush-get-spikes:
  blurb: "Gets the number of spikes for a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-spikes(brush)"

gimp-path-stroke-reverse:
  blurb: "reverses the specified stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
  example_call: "gimp-path-stroke-reverse(path, stroke-id)"

plugin-path-crop:
  blurb: "Crop to first path and extract anchor coordinates for use."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plugin-path-crop(run-mode, image, drawables)"

gimp-attach-parasite:
  blurb: "Add a global parasite."
  arguments:
    - name: "parasite"
      type: "GimpParasite"
  example_call: "gimp-attach-parasite(parasite)"

gimp-brush-get-by-name:
  blurb: "Returns the brush with the given name."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-brush-get-by-name(name)"

gimp-drawable-edit-bucket-fill:
  blurb: "Fill the area by a seed fill starting at the specified coordinates."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "fill-type"
      type: "GimpFillType"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
  example_call: "gimp-drawable-edit-bucket-fill(drawable, fill-type, x, y)"

gimp-layer-new-from-visible:
  blurb: "Create a new layer from what is visible in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "dest-image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-layer-new-from-visible(image, dest-image, name)"

gimp-text-layer-set-indent:
  blurb: "Set the indentation of the first line in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "indent"
      type: "gdouble"
  example_call: "gimp-text-layer-set-indent(layer, indent)"

gimp-palette-get-colors:
  blurb: "Gets colors in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
  example_call: "gimp-palette-get-colors(palette)"

gimp-item-transform-perspective:
  blurb: "Perform a possibly non-affine transformation on the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
    - name: "x2"
      type: "gdouble"
    - name: "y2"
      type: "gdouble"
    - name: "x3"
      type: "gdouble"
    - name: "y3"
      type: "gdouble"
  example_call: "gimp-item-transform-perspective(item, x0, y0, x1, y1, x2, y2, x3, y3)"

gimp-gradient-segment-set-left-pos:
  blurb: "Sets the left endpoint position of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
    - name: "pos"
      type: "gdouble"
  example_call: "gimp-gradient-segment-set-left-pos(gradient, segment, pos)"

file-pcx-export:
  blurb: "Exports files in ZSoft PCX file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-pcx-export(run-mode, image, file, options)"

gimp-get-default-comment:
  blurb: "Get the default image comment as specified in the Preferences."
  arguments:
  example_call: "gimp-get-default-comment()"

gimp-item-get-expanded:
  blurb: "Returns whether the item is expanded."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-expanded(item)"

gimp-context-get-brush-size:
  blurb: "Get brush size in pixels."
  arguments:
  example_call: "gimp-context-get-brush-size()"

gimp-text-layer-set-line-spacing:
  blurb: "Adjust the line spacing in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "line-spacing"
      type: "gdouble"
  example_call: "gimp-text-layer-set-line-spacing(layer, line-spacing)"

gimp-layer-set-blend-space:
  blurb: "Set the blend space of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
    - name: "blend-space"
      type: "GimpLayerColorSpace"
  example_call: "gimp-layer-set-blend-space(layer, blend-space)"

gimp-item-attach-parasite:
  blurb: "Add a parasite to an item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "parasite"
      type: "GimpParasite"
  example_call: "gimp-item-attach-parasite(item, parasite)"

gimp-context-get-transform-resize:
  blurb: "Get the transform resize type."
  arguments:
  example_call: "gimp-context-get-transform-resize()"

gimp-context-set-antialias:
  blurb: "Set the antialias setting."
  arguments:
    - name: "antialias"
      type: "gboolean"
  example_call: "gimp-context-set-antialias(antialias)"

gimp-context-get-interpolation:
  blurb: "Get the interpolation type."
  arguments:
  example_call: "gimp-context-get-interpolation()"

plug-in-sample-colorize:
  blurb: "Colorize image using a sample image as a guide"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "sample-drawable"
      type: "GimpDrawable"
    - name: "hold-inten"
      type: "gboolean"
    - name: "orig-inten"
      type: "gboolean"
    - name: "rnd-subcolors"
      type: "gboolean"
    - name: "guess-missing"
      type: "gboolean"
    - name: "in-low"
      type: "gint"
    - name: "in-high"
      type: "gint"
    - name: "gamma"
      type: "gdouble"
    - name: "out-low"
      type: "gint"
    - name: "out-high"
      type: "gint"
  example_call: "plug-in-sample-colorize(run-mode, image, drawables, sample-drawable, hold-inten, orig-inten, rnd-subcolors, guess-missing, in-low, in-high, gamma, out-low, out-high)"

gimp-getpid:
  blurb: "Returns the PID of the host GIMP process."
  arguments:
  example_call: "gimp-getpid()"

gimp-resource-id-is-gradient:
  blurb: "Returns whether the resource ID is a gradient."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-gradient(resource-id)"

gimp-item-set-lock-content:
  blurb: "Set the 'lock content' state of the specified item."
  arguments:
    - name: "item"
      type: "GimpItem"
    - name: "lock-content"
      type: "gboolean"
  example_call: "gimp-item-set-lock-content(item, lock-content)"

gimp-gradient-segment-get-left-pos:
  blurb: "Gets the left endpoint position of a segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
  example_call: "gimp-gradient-segment-get-left-pos(gradient, segment)"

gimp-display-new:
  blurb: "Create a new display for the specified image."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-display-new(image)"

file-ppm-export:
  blurb: "Exports files in the PPM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "raw"
      type: "gchararray"
  example_call: "file-ppm-export(run-mode, image, file, options, raw)"

file-jpeg-load:
  blurb: "Loads files in the JPEG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-jpeg-load(run-mode, file)"

gimp-image-undo-disable:
  blurb: "Disable the image's undo stack."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-undo-disable(image)"

file-gz-load:
  blurb: "loads files compressed with gzip"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-gz-load(run-mode, file)"

gimp-item-get-parasite-list:
  blurb: "List all parasites."
  arguments:
    - name: "item"
      type: "GimpItem"
  example_call: "gimp-item-get-parasite-list(item)"

file-pix-load:
  blurb: "Loads files of the Alias|Wavefront or Esm Software Pix file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-pix-load(run-mode, file)"

gimp-drawable-histogram:
  blurb: "Returns information on the intensity histogram for the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "channel"
      type: "GimpHistogramChannel"
    - name: "start-range"
      type: "gdouble"
    - name: "end-range"
      type: "gdouble"
  example_call: "gimp-drawable-histogram(drawable, channel, start-range, end-range)"

file-dds-export:
  blurb: "Saves files in DDS image format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "compression-format"
      type: "gchararray"
    - name: "perceptual-metric"
      type: "gboolean"
    - name: "format"
      type: "gchararray"
    - name: "save-type"
      type: "gchararray"
    - name: "flip-image"
      type: "gboolean"
    - name: "transparent-color"
      type: "gboolean"
    - name: "transparent-index"
      type: "gint"
    - name: "mipmaps"
      type: "gchararray"
    - name: "mipmap-filter"
      type: "gchararray"
    - name: "mipmap-wrap"
      type: "gchararray"
    - name: "gamma-correct"
      type: "gboolean"
    - name: "srgb"
      type: "gboolean"
    - name: "gamma"
      type: "gdouble"
    - name: "preserve-alpha-coverage"
      type: "gboolean"
    - name: "alpha-test-threshold"
      type: "gdouble"
  example_call: "file-dds-export(run-mode, image, file, options, compression-format, perceptual-metric, format, save-type, flip-image, transparent-color, transparent-index, mipmaps, mipmap-filter, mipmap-wrap, gamma-correct, srgb, gamma, preserve-alpha-coverage, alpha-test-threshold)"

gimp-drawable-hue-saturation:
  blurb: "Modify hue, lightness, and saturation in the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "hue-range"
      type: "GimpHueRange"
    - name: "hue-offset"
      type: "gdouble"
    - name: "lightness"
      type: "gdouble"
    - name: "saturation"
      type: "gdouble"
    - name: "overlap"
      type: "gdouble"
  example_call: "gimp-drawable-hue-saturation(drawable, hue-range, hue-offset, lightness, saturation, overlap)"

script-fu-spinning-globe:
  blurb: "Create an animation by mapping the current image onto a spinning sphere"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
    - name: "adjustment-2"
      type: "gint"
    - name: "toggle-3"
      type: "gboolean"
  example_call: "script-fu-spinning-globe(run-mode, image, drawables, adjustment, toggle, toggle-2, adjustment-2, toggle-3)"

plug-in-hot:
  blurb: "Find and fix pixels that may be unsafely bright"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "mode"
      type: "gchararray"
    - name: "action"
      type: "gchararray"
    - name: "new-layer"
      type: "gboolean"
  example_call: "plug-in-hot(run-mode, image, drawables, mode, action, new-layer)"

gimp-text-layer-set-font-size:
  blurb: "Set the font size."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "font-size"
      type: "gdouble"
    - name: "unit"
      type: "GimpUnit"
  example_call: "gimp-text-layer-set-font-size(layer, font-size, unit)"

gimp-layer-new-from-drawable:
  blurb: "Create a new layer by copying an existing drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "dest-image"
      type: "GimpImage"
  example_call: "gimp-layer-new-from-drawable(drawable, dest-image)"

gimp-text-layer-get-color:
  blurb: "Get the color of the text in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-color(layer)"

gimp-edit-paste:
  blurb: "Paste buffer to the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "paste-into"
      type: "gboolean"
  example_call: "gimp-edit-paste(drawable, paste-into)"

file-raw-export:
  blurb: "Dump images to disk in raw format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "planar-configuration"
      type: "gchararray"
    - name: "palette-type"
      type: "gchararray"
  example_call: "file-raw-export(run-mode, image, file, options, planar-configuration, palette-type)"

plug-in-destripe:
  blurb: "Remove vertical stripe artifacts from the image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "avg-width"
      type: "gint"
    - name: "create-histogram"
      type: "gboolean"
  example_call: "plug-in-destripe(run-mode, image, drawables, avg-width, create-histogram)"

python-fu-palette-offset:
  blurb: "Offset the colors in a palette"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "palette"
      type: "GimpPalette"
    - name: "amount"
      type: "gint"
  example_call: "python-fu-palette-offset(run-mode, palette, amount)"

gimp-image-find-next-sample-point:
  blurb: "Find next sample point on an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "sample-point"
      type: "guint"
  example_call: "gimp-image-find-next-sample-point(image, sample-point)"

gimp-image-get-height:
  blurb: "Return the height of the image"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-height(image)"

gimp-text-layer-set-text:
  blurb: "Set the text of a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "text"
      type: "gchararray"
  example_call: "gimp-text-layer-set-text(layer, text)"

file-mng-export:
  blurb: "Saves images in the MNG file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
    - name: "interlaced"
      type: "gboolean"
    - name: "png-compression"
      type: "gint"
    - name: "jpeg-quality"
      type: "gdouble"
    - name: "jpeg-smoothing"
      type: "gdouble"
    - name: "loop"
      type: "gboolean"
    - name: "default-delay"
      type: "gint"
    - name: "default-chunks"
      type: "gchararray"
    - name: "default-dispose"
      type: "gchararray"
    - name: "bkgd"
      type: "gboolean"
    - name: "gama"
      type: "gboolean"
    - name: "phys"
      type: "gboolean"
    - name: "time"
      type: "gboolean"
  example_call: "file-mng-export(run-mode, image, file, options, interlaced, png-compression, jpeg-quality, jpeg-smoothing, loop, default-delay, default-chunks, default-dispose, bkgd, gama, phys, time)"

gimp-gradient-segment-range-delete:
  blurb: "Delete the segment range"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "start-segment"
      type: "gint"
    - name: "end-segment"
      type: "gint"
  example_call: "gimp-gradient-segment-range-delete(gradient, start-segment, end-segment)"

plug-in-map-object:
  blurb: "Map the image to an object (plane, sphere, box or cylinder)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "map-type"
      type: "gchararray"
    - name: "viewpoint-x"
      type: "gdouble"
    - name: "viewpoint-y"
      type: "gdouble"
    - name: "viewpoint-z"
      type: "gdouble"
    - name: "position-x"
      type: "gdouble"
    - name: "position-y"
      type: "gdouble"
    - name: "position-z"
      type: "gdouble"
    - name: "first-axis-x"
      type: "gdouble"
    - name: "first-axis-y"
      type: "gdouble"
    - name: "first-axis-z"
      type: "gdouble"
    - name: "second-axis-x"
      type: "gdouble"
    - name: "second-axis-y"
      type: "gdouble"
    - name: "second-axis-z"
      type: "gdouble"
    - name: "rotation-angle-x"
      type: "gdouble"
    - name: "rotation-angle-y"
      type: "gdouble"
    - name: "rotation-angle-z"
      type: "gdouble"
    - name: "light-type"
      type: "gchararray"
    - name: "light-color"
      type: "GeglColor"
    - name: "light-position-x"
      type: "gdouble"
    - name: "light-position-y"
      type: "gdouble"
    - name: "light-position-z"
      type: "gdouble"
    - name: "light-direction-x"
      type: "gdouble"
    - name: "light-direction-y"
      type: "gdouble"
    - name: "light-direction-z"
      type: "gdouble"
    - name: "ambient-intensity"
      type: "gdouble"
    - name: "diffuse-intensity"
      type: "gdouble"
    - name: "diffuse-reflectivity"
      type: "gdouble"
    - name: "specular-reflectivity"
      type: "gdouble"
    - name: "highlight"
      type: "gdouble"
    - name: "antialiasing"
      type: "gboolean"
    - name: "depth"
      type: "gdouble"
    - name: "threshold"
      type: "gdouble"
    - name: "tiled"
      type: "gboolean"
    - name: "new-image"
      type: "gboolean"
    - name: "new-layer"
      type: "gboolean"
    - name: "transparent-background"
      type: "gboolean"
    - name: "sphere-radius"
      type: "gdouble"
    - name: "box-front-drawable"
      type: "GimpDrawable"
    - name: "box-back-drawable"
      type: "GimpDrawable"
    - name: "box-top-drawable"
      type: "GimpDrawable"
    - name: "box-bottom-drawable"
      type: "GimpDrawable"
    - name: "box-left-drawable"
      type: "GimpDrawable"
    - name: "box-right-drawable"
      type: "GimpDrawable"
    - name: "x-scale"
      type: "gdouble"
    - name: "y-scale"
      type: "gdouble"
    - name: "z-scale"
      type: "gdouble"
    - name: "cyl-top-drawable"
      type: "GimpDrawable"
    - name: "cyl-bottom-drawable"
      type: "GimpDrawable"
    - name: "cylinder-radius"
      type: "gdouble"
    - name: "cylinder-length"
      type: "gdouble"
  example_call: "plug-in-map-object(run-mode, image, drawables, map-type, viewpoint-x, viewpoint-y, viewpoint-z, position-x, position-y, position-z, first-axis-x, first-axis-y, first-axis-z, second-axis-x, second-axis-y, second-axis-z, rotation-angle-x, rotation-angle-y, rotation-angle-z, light-type, light-color, light-position-x, light-position-y, light-position-z, light-direction-x, light-direction-y, light-direction-z, ambient-intensity, diffuse-intensity, diffuse-reflectivity, specular-reflectivity, highlight, antialiasing, depth, threshold, tiled, new-image, new-layer, transparent-background, sphere-radius, box-front-drawable, box-back-drawable, box-top-drawable, box-bottom-drawable, box-left-drawable, box-right-drawable, x-scale, y-scale, z-scale, cyl-top-drawable, cyl-bottom-drawable, cylinder-radius, cylinder-length)"

file-raw-load:
  blurb: "Load raw images, specifying image information"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "offset"
      type: "gint"
    - name: "pixel-format"
      type: "gchararray"
    - name: "data-type"
      type: "gchararray"
    - name: "endianness"
      type: "gchararray"
    - name: "planar-configuration"
      type: "gchararray"
    - name: "palette-offset"
      type: "gint"
    - name: "palette-type"
      type: "gchararray"
    - name: "palette-file"
      type: "GFile"
  example_call: "file-raw-load(run-mode, file, width, height, offset, pixel-format, data-type, endianness, planar-configuration, palette-offset, palette-type, palette-file)"

gimp-context-get-line-dash-pattern:
  blurb: "Get the line dash pattern setting."
  arguments:
  example_call: "gimp-context-get-line-dash-pattern()"

script-fu-slide:
  blurb: "Add a slide-film like frame, sprocket holes, and labels to an image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "string"
      type: "gchararray"
    - name: "string-2"
      type: "gchararray"
    - name: "font"
      type: "GimpFont"
    - name: "color"
      type: "GeglColor"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-slide(run-mode, image, drawables, string, string-2, font, color, toggle)"

gimp-context-get-opacity:
  blurb: "Get the opacity."
  arguments:
  example_call: "gimp-context-get-opacity()"

gimp-image-clean-all:
  blurb: "Set the image dirty count to 0."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-clean-all(image)"

script-fu-addborder:
  blurb: "Add a border around an image"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "color"
      type: "GeglColor"
    - name: "adjustment-3"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-addborder(run-mode, image, drawables, adjustment, adjustment-2, color, adjustment-3, toggle)"

gimp-brush-new:
  blurb: "Create a new generated brush having default parameters."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-brush-new(name)"

gimp-item-id-is-drawable:
  blurb: "Returns whether the item ID is a drawable."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-drawable(item-id)"

gimp-image-grid-set-foreground-color:
  blurb: "Gets the foreground color of an image's grid."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "fgcolor"
      type: "GeglColor"
  example_call: "gimp-image-grid-set-foreground-color(image, fgcolor)"

gimp-buffer-get-height:
  blurb: "Retrieves the specified buffer's height."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-buffer-get-height(buffer-name)"

file-fli-info:
  blurb: "Get information about a Fli movie"
  arguments:
    - name: "file"
      type: "GFile"
  example_call: "file-fli-info(file)"

gimp-layer-get-mode:
  blurb: "Get the combination mode of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-mode(layer)"

script-fu-selection-rounded-rectangle:
  blurb: "Round the corners of the current selection"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "adjustment"
      type: "gint"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-selection-rounded-rectangle(run-mode, image, drawables, adjustment, toggle)"

plug-in-guillotine:
  blurb: "Slice the image into subimages using guides"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-guillotine(run-mode, image, drawables)"

gimp-image-set-selected-channels:
  blurb: "Sets the specified image's selected channels."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "channels"
      type: "GimpCoreObjectArray"
  example_call: "gimp-image-set-selected-channels(image, channels)"

plug-in-script-fu-server:
  blurb: "Server for remote Script-Fu operation"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "ip"
      type: "gchararray"
    - name: "port"
      type: "gint"
    - name: "logfile"
      type: "gchararray"
  example_call: "plug-in-script-fu-server(run-mode, ip, port, logfile)"

gimp-brush-get-aspect-ratio:
  blurb: "Gets the aspect ratio of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
  example_call: "gimp-brush-get-aspect-ratio(brush)"

gimp-image-crop:
  blurb: "Crop the image to the specified extents."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "new-width"
      type: "gint"
    - name: "new-height"
      type: "gint"
    - name: "offx"
      type: "gint"
    - name: "offy"
      type: "gint"
  example_call: "gimp-image-crop(image, new-width, new-height, offx, offy)"

gimp-drawable-edit-clear:
  blurb: "Clear selected area of drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-edit-clear(drawable)"

gimp-palette-get-entry-color:
  blurb: "Gets the color of an entry in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-num"
      type: "gint"
  example_call: "gimp-palette-get-entry-color(palette, entry-num)"

gimp-context-set-opacity:
  blurb: "Set the opacity."
  arguments:
    - name: "opacity"
      type: "gdouble"
  example_call: "gimp-context-set-opacity(opacity)"

file-bz2-load:
  blurb: "loads files compressed with bzip2"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-bz2-load(run-mode, file)"

gimp-dodgeburn-default:
  blurb: "Dodgeburn image with varying exposure. This is the same as the gimp_dodgeburn() function except that the exposure, type and mode are taken from the tools option dialog. If the dialog has not been activated then the defaults as used by the dialog will be used."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
    - name: "strokes"
      type: "GimpDoubleArray"
  example_call: "gimp-dodgeburn-default(drawable, strokes)"

gimp-context-get-pattern:
  blurb: "Get the currently active pattern."
  arguments:
  example_call: "gimp-context-get-pattern()"

gimp-patterns-get-list:
  blurb: "Retrieve a complete listing of the available patterns."
  arguments:
    - name: "filter"
      type: "gchararray"
  example_call: "gimp-patterns-get-list(filter)"

gimp-patterns-popup:
  blurb: "Invokes the Gimp pattern selection."
  arguments:
    - name: "pattern-callback"
      type: "gchararray"
    - name: "popup-title"
      type: "gchararray"
    - name: "initial-pattern"
      type: "GimpPattern"
    - name: "parent-window"
      type: "GBytes"
  example_call: "gimp-patterns-popup(pattern-callback, popup-title, initial-pattern, parent-window)"

gimp-context-set-mypaint-brush:
  blurb: "Set a MyPaint brush as the active MyPaint brush."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-context-set-mypaint-brush(name)"

gimp-context-set-paint-method:
  blurb: "Set the active paint method."
  arguments:
    - name: "name"
      type: "gchararray"
  example_call: "gimp-context-set-paint-method(name)"

file-fits-load:
  blurb: "Load file of the FITS file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-fits-load(run-mode, file)"

gimp-image-convert-color-profile-from-file:
  blurb: "Convert the image's layers to a color profile"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "intent"
      type: "GimpColorRenderingIntent"
    - name: "bpc"
      type: "gboolean"
  example_call: "gimp-image-convert-color-profile-from-file(image, file, intent, bpc)"

file-exr-export:
  blurb: "Saves files in the OpenEXR file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-exr-export(run-mode, image, file, options)"

gimp-debug-timer-start:
  blurb: "Starts measuring elapsed time."
  arguments:
  example_call: "gimp-debug-timer-start()"

gimp-text-layer-set-letter-spacing:
  blurb: "Adjust the letter spacing in a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "letter-spacing"
      type: "gdouble"
  example_call: "gimp-text-layer-set-letter-spacing(layer, letter-spacing)"

file-rgbe-export:
  blurb: "Saves files in the RGBE file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-rgbe-export(run-mode, image, file, options)"

gimp-image-get-name:
  blurb: "Returns the specified image's name."
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-name(image)"

gimp-context-swap-colors:
  blurb: "Swap the current GIMP foreground and background colors."
  arguments:
  example_call: "gimp-context-swap-colors()"

file-tiff-load:
  blurb: "Loads files of the TIFF and BigTIFF file formats"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-tiff-load(run-mode, file)"

gimp-image-select-round-rectangle:
  blurb: "Create a rectangular selection with round corners over the specified image;"
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "operation"
      type: "GimpChannelOps"
    - name: "x"
      type: "gdouble"
    - name: "y"
      type: "gdouble"
    - name: "width"
      type: "gdouble"
    - name: "height"
      type: "gdouble"
    - name: "corner-radius-x"
      type: "gdouble"
    - name: "corner-radius-y"
      type: "gdouble"
  example_call: "gimp-image-select-round-rectangle(image, operation, x, y, width, height, corner-radius-x, corner-radius-y)"

file-raw-placeholder-phaseone-load:
  blurb: "Load files in the Phase One raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-phaseone-load(run-mode, file)"

gimp-context-get-emulate-brush-dynamics:
  blurb: "Retrieve the currently active stroke option's emulate brush dynamics setting."
  arguments:
  example_call: "gimp-context-get-emulate-brush-dynamics()"

gimp-context-set-pattern:
  blurb: "Set the active pattern."
  arguments:
    - name: "pattern"
      type: "GimpPattern"
  example_call: "gimp-context-set-pattern(pattern)"

gimp-item-id-is-group-layer:
  blurb: "Returns whether the item ID is a group layer."
  arguments:
    - name: "item-id"
      type: "gint"
  example_call: "gimp-item-id-is-group-layer(item-id)"

gimp-drawable-is-indexed:
  blurb: "Returns whether the drawable is an indexed type."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-is-indexed(drawable)"

gimp-gradient-segment-set-left-color:
  blurb: "Sets the left endpoint color of a segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-gradient-segment-set-left-color(gradient, segment, color)"

gimp-buffer-get-bytes:
  blurb: "Retrieves the specified buffer's bytes."
  arguments:
    - name: "buffer-name"
      type: "gchararray"
  example_call: "gimp-buffer-get-bytes(buffer-name)"

gimp-context-set-sample-threshold:
  blurb: "Set the sample threshold setting."
  arguments:
    - name: "sample-threshold"
      type: "gdouble"
  example_call: "gimp-context-set-sample-threshold(sample-threshold)"

gimp-palette-set-entry-name:
  blurb: "Sets the name of an entry in the palette."
  arguments:
    - name: "palette"
      type: "GimpPalette"
    - name: "entry-num"
      type: "gint"
    - name: "entry-name"
      type: "gchararray"
  example_call: "gimp-palette-set-entry-name(palette, entry-num, entry-name)"

gimp-palette-export-python:
  blurb: "Export the active palette as a Python dictionary (name: color)"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "dirname"
      type: "GFile"
    - name: "string"
      type: "gchararray"
  example_call: "gimp-palette-export-python(run-mode, dirname, string)"

gimp-context-get-antialias:
  blurb: "Get the antialias setting."
  arguments:
  example_call: "gimp-context-get-antialias()"

gimp-gradient-segment-set-right-pos:
  blurb: "Sets the right endpoint position of the segment"
  arguments:
    - name: "gradient"
      type: "GimpGradient"
    - name: "segment"
      type: "gint"
    - name: "pos"
      type: "gdouble"
  example_call: "gimp-gradient-segment-set-right-pos(gradient, segment, pos)"

gimp-image-set-file:
  blurb: "Sets the specified XCF image's file."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
  example_call: "gimp-image-set-file(image, file)"

plug-in-recompose:
  blurb: "Recompose an image that was previously decomposed"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
  example_call: "plug-in-recompose(run-mode, image, drawables)"

gimp-path-get-strokes:
  blurb: "List the strokes associated with the passed path."
  arguments:
    - name: "path"
      type: "GimpPath"
  example_call: "gimp-path-get-strokes(path)"

gimp-online-main-web-site:
  blurb: "Bookmark to the GIMP web site"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
  example_call: "gimp-online-main-web-site(run-mode)"

python-fu-gradient-save-as-css:
  blurb: "Creates a new palette from a given gradient"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "gradient"
      type: "GimpGradient"
    - name: "file"
      type: "GFile"
  example_call: "python-fu-gradient-save-as-css(run-mode, gradient, file)"

gimp-layer-get-apply-mask:
  blurb: "Get the apply mask setting of the specified layer."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-get-apply-mask(layer)"

gimp-text-layer-set-base-direction:
  blurb: "Set the base direction in the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "direction"
      type: "GimpTextDirection"
  example_call: "gimp-text-layer-set-base-direction(layer, direction)"

gimp-version:
  blurb: "Returns the host GIMP version."
  arguments:
  example_call: "gimp-version()"

gimp-layer-flatten:
  blurb: "Remove the alpha channel from the layer if it has one."
  arguments:
    - name: "layer"
      type: "GimpLayer"
  example_call: "gimp-layer-flatten(layer)"

gimp-selection-value:
  blurb: "Find the value of the selection at the specified coordinates."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "x"
      type: "gint"
    - name: "y"
      type: "gint"
  example_call: "gimp-selection-value(image, x, y)"

gimp-image-get-simulation-intent:
  blurb: "Returns the image's simulation rendering intent"
  arguments:
    - name: "image"
      type: "GimpImage"
  example_call: "gimp-image-get-simulation-intent(image)"

gimp-layer-new:
  blurb: "Create a new layer."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
    - name: "width"
      type: "gint"
    - name: "height"
      type: "gint"
    - name: "type"
      type: "GimpImageType"
    - name: "opacity"
      type: "gdouble"
    - name: "mode"
      type: "GimpLayerMode"
  example_call: "gimp-layer-new(image, name, width, height, type, opacity, mode)"

gimp-brush-set-radius:
  blurb: "Sets the radius of a generated brush."
  arguments:
    - name: "brush"
      type: "GimpBrush"
    - name: "radius-in"
      type: "gdouble"
  example_call: "gimp-brush-set-radius(brush, radius-in)"

gimp-path-bezier-stroke-cubicto:
  blurb: "Extends a bezier stroke with a cubic bezier spline."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
    - name: "x0"
      type: "gdouble"
    - name: "y0"
      type: "gdouble"
    - name: "x1"
      type: "gdouble"
    - name: "y1"
      type: "gdouble"
    - name: "x2"
      type: "gdouble"
    - name: "y2"
      type: "gdouble"
  example_call: "gimp-path-bezier-stroke-cubicto(path, stroke-id, x0, y0, x1, y1, x2, y2)"

gimp-text-layer-get-font-size:
  blurb: "Get the font size from a text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
  example_call: "gimp-text-layer-get-font-size(layer)"

gimp-resource-id-is-brush:
  blurb: "Returns whether the resource ID is a brush."
  arguments:
    - name: "resource-id"
      type: "gint"
  example_call: "gimp-resource-id-is-brush(resource-id)"

file-jpeg-load-thumb:
  blurb: "Loads a thumbnail from a JPEG image"
  arguments:
    - name: "file"
      type: "GFile"
    - name: "thumb-size"
      type: "gint"
  example_call: "file-jpeg-load-thumb(file, thumb-size)"

gimp-text-layer-set-color:
  blurb: "Set the color of the text in the text layer."
  arguments:
    - name: "layer"
      type: "GimpTextLayer"
    - name: "color"
      type: "GeglColor"
  example_call: "gimp-text-layer-set-color(layer, color)"

gimp-image-set-unit:
  blurb: "Sets the specified image's unit."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "unit"
      type: "GimpUnit"
  example_call: "gimp-image-set-unit(image, unit)"

gimp-image-get-path-by-name:
  blurb: "Find a path with a given name in an image."
  arguments:
    - name: "image"
      type: "GimpImage"
    - name: "name"
      type: "gchararray"
  example_call: "gimp-image-get-path-by-name(image, name)"

gimp-context-get-ink-blob-angle:
  blurb: "Get ink blob angle in degrees."
  arguments:
  example_call: "gimp-context-get-ink-blob-angle()"

file-gex-load:
  blurb: "Loads GIMP extension"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-gex-load(run-mode, file)"

file-raw-placeholder-canon-load:
  blurb: "Load files in the Canon raw formats via placeholder"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "file"
      type: "GFile"
  example_call: "file-raw-placeholder-canon-load(run-mode, file)"

gimp-path-stroke-close:
  blurb: "closes the specified stroke."
  arguments:
    - name: "path"
      type: "GimpPath"
    - name: "stroke-id"
      type: "gint"
  example_call: "gimp-path-stroke-close(path, stroke-id)"

gimp-context-pop:
  blurb: "Pops the topmost context from the plug-in's context stack."
  arguments:
  example_call: "gimp-context-pop()"

gimp-drawable-merge-filters:
  blurb: "Merge the layer effect filters to the specified drawable."
  arguments:
    - name: "drawable"
      type: "GimpDrawable"
  example_call: "gimp-drawable-merge-filters(drawable)"

script-fu-carve-it:
  blurb: "Use the specified drawable as a stencil to carve from the specified image."
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "drawables"
      type: "GimpCoreObjectArray"
    - name: "otherImage"
      type: "GimpImage"
    - name: "drawable"
      type: "GimpDrawable"
    - name: "toggle"
      type: "gboolean"
  example_call: "script-fu-carve-it(run-mode, image, drawables, otherImage, drawable, toggle)"

plug-in-script-fu-eval:
  blurb: "Evaluate scheme code"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "script"
      type: "gchararray"
  example_call: "plug-in-script-fu-eval(run-mode, script)"

file-pfm-export:
  blurb: "Exports files in the PFM file format"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "image"
      type: "GimpImage"
    - name: "file"
      type: "GFile"
    - name: "options"
      type: "GimpExportOptions"
  example_call: "file-pfm-export(run-mode, image, file, options)"

gimp-channel-get-show-masked:
  blurb: "Get the composite method of the specified channel."
  arguments:
    - name: "channel"
      type: "GimpChannel"
  example_call: "gimp-channel-get-show-masked(channel)"

gimp-context-set-gradient-fg-bg-hsv-cw:
  blurb: "Sets the built-in FG-BG HSV (cw) gradient as the active gradient."
  arguments:
  example_call: "gimp-context-set-gradient-fg-bg-hsv-cw()"

gimp-context-set-gradient-fg-transparent:
  blurb: "Sets the built-in FG-Transparent gradient as the active gradient."
  arguments:
  example_call: "gimp-context-set-gradient-fg-transparent()"

file-glob:
  blurb: "Returns a list of matching filenames"
  arguments:
    - name: "pattern"
      type: "gchararray"
    - name: "filename-encoding"
      type: "gboolean"
  example_call: "file-glob(pattern, filename-encoding)"

script-fu-font-map:
  blurb: "Create an image filled with previews of fonts matching a fontname filter"
  arguments:
    - name: "run-mode"
      type: "GimpRunMode"
    - name: "string"
      type: "gchararray"
    - name: "toggle"
      type: "gboolean"
    - name: "toggle-2"
      type: "gboolean"
    - name: "string-2"
      type: "gchararray"
    - name: "adjustment"
      type: "gint"
    - name: "adjustment-2"
      type: "gint"
    - name: "option"
      type: "gint"
  example_call: "script-fu-font-map(run-mode, string, toggle, toggle-2, string-2, adjustment, adjustment-2, option)"

